
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model AccountData
 * 
 */
export type AccountData = $Result.DefaultSelection<Prisma.$AccountDataPayload>
/**
 * Model UserDetail
 * 
 */
export type UserDetail = $Result.DefaultSelection<Prisma.$UserDetailPayload>
/**
 * Model Event
 * 
 */
export type Event = $Result.DefaultSelection<Prisma.$EventPayload>
/**
 * Model EventPrice
 * 
 */
export type EventPrice = $Result.DefaultSelection<Prisma.$EventPricePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Type: {
  user: 'user',
  admin: 'admin'
};

export type Type = (typeof Type)[keyof typeof Type]


export const Status: {
  Publish: 'Publish',
  Hidden: 'Hidden'
};

export type Status = (typeof Status)[keyof typeof Status]


export const Category: {
  Concert: 'Concert',
  Expo: 'Expo',
  Play: 'Play',
  Workshop: 'Workshop',
  Sport: 'Sport'
};

export type Category = (typeof Category)[keyof typeof Category]


export const City: {
  Jakarta: 'Jakarta',
  Bogor: 'Bogor',
  Depok: 'Depok',
  Tangerang: 'Tangerang',
  Bekasi: 'Bekasi'
};

export type City = (typeof City)[keyof typeof City]

}

export type Type = $Enums.Type

export const Type: typeof $Enums.Type

export type Status = $Enums.Status

export const Status: typeof $Enums.Status

export type Category = $Enums.Category

export const Category: typeof $Enums.Category

export type City = $Enums.City

export const City: typeof $Enums.City

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more AccountData
 * const accountData = await prisma.accountData.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more AccountData
   * const accountData = await prisma.accountData.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.accountData`: Exposes CRUD operations for the **AccountData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AccountData
    * const accountData = await prisma.accountData.findMany()
    * ```
    */
  get accountData(): Prisma.AccountDataDelegate<ExtArgs>;

  /**
   * `prisma.userDetail`: Exposes CRUD operations for the **UserDetail** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserDetails
    * const userDetails = await prisma.userDetail.findMany()
    * ```
    */
  get userDetail(): Prisma.UserDetailDelegate<ExtArgs>;

  /**
   * `prisma.event`: Exposes CRUD operations for the **Event** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.event.findMany()
    * ```
    */
  get event(): Prisma.EventDelegate<ExtArgs>;

  /**
   * `prisma.eventPrice`: Exposes CRUD operations for the **EventPrice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EventPrices
    * const eventPrices = await prisma.eventPrice.findMany()
    * ```
    */
  get eventPrice(): Prisma.EventPriceDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.15.0
   * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    AccountData: 'AccountData',
    UserDetail: 'UserDetail',
    Event: 'Event',
    EventPrice: 'EventPrice'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'accountData' | 'userDetail' | 'event' | 'eventPrice'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      AccountData: {
        payload: Prisma.$AccountDataPayload<ExtArgs>
        fields: Prisma.AccountDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountDataFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountDataFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountDataPayload>
          }
          findFirst: {
            args: Prisma.AccountDataFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountDataFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountDataPayload>
          }
          findMany: {
            args: Prisma.AccountDataFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountDataPayload>[]
          }
          create: {
            args: Prisma.AccountDataCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountDataPayload>
          }
          createMany: {
            args: Prisma.AccountDataCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AccountDataDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountDataPayload>
          }
          update: {
            args: Prisma.AccountDataUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountDataPayload>
          }
          deleteMany: {
            args: Prisma.AccountDataDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AccountDataUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AccountDataUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountDataPayload>
          }
          aggregate: {
            args: Prisma.AccountDataAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAccountData>
          }
          groupBy: {
            args: Prisma.AccountDataGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AccountDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountDataCountArgs<ExtArgs>,
            result: $Utils.Optional<AccountDataCountAggregateOutputType> | number
          }
        }
      }
      UserDetail: {
        payload: Prisma.$UserDetailPayload<ExtArgs>
        fields: Prisma.UserDetailFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserDetailFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserDetailPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserDetailFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserDetailPayload>
          }
          findFirst: {
            args: Prisma.UserDetailFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserDetailPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserDetailFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserDetailPayload>
          }
          findMany: {
            args: Prisma.UserDetailFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserDetailPayload>[]
          }
          create: {
            args: Prisma.UserDetailCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserDetailPayload>
          }
          createMany: {
            args: Prisma.UserDetailCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDetailDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserDetailPayload>
          }
          update: {
            args: Prisma.UserDetailUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserDetailPayload>
          }
          deleteMany: {
            args: Prisma.UserDetailDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserDetailUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserDetailUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserDetailPayload>
          }
          aggregate: {
            args: Prisma.UserDetailAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUserDetail>
          }
          groupBy: {
            args: Prisma.UserDetailGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserDetailGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserDetailCountArgs<ExtArgs>,
            result: $Utils.Optional<UserDetailCountAggregateOutputType> | number
          }
        }
      }
      Event: {
        payload: Prisma.$EventPayload<ExtArgs>
        fields: Prisma.EventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findFirst: {
            args: Prisma.EventFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findMany: {
            args: Prisma.EventFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          create: {
            args: Prisma.EventCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          createMany: {
            args: Prisma.EventCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EventDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          update: {
            args: Prisma.EventUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          deleteMany: {
            args: Prisma.EventDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EventUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EventUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          aggregate: {
            args: Prisma.EventAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEvent>
          }
          groupBy: {
            args: Prisma.EventGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EventGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventCountArgs<ExtArgs>,
            result: $Utils.Optional<EventCountAggregateOutputType> | number
          }
        }
      }
      EventPrice: {
        payload: Prisma.$EventPricePayload<ExtArgs>
        fields: Prisma.EventPriceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventPriceFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPricePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventPriceFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPricePayload>
          }
          findFirst: {
            args: Prisma.EventPriceFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPricePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventPriceFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPricePayload>
          }
          findMany: {
            args: Prisma.EventPriceFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPricePayload>[]
          }
          create: {
            args: Prisma.EventPriceCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPricePayload>
          }
          createMany: {
            args: Prisma.EventPriceCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EventPriceDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPricePayload>
          }
          update: {
            args: Prisma.EventPriceUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPricePayload>
          }
          deleteMany: {
            args: Prisma.EventPriceDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EventPriceUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EventPriceUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPricePayload>
          }
          aggregate: {
            args: Prisma.EventPriceAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEventPrice>
          }
          groupBy: {
            args: Prisma.EventPriceGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EventPriceGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventPriceCountArgs<ExtArgs>,
            result: $Utils.Optional<EventPriceCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AccountDataCountOutputType
   */

  export type AccountDataCountOutputType = {
    Event: number
  }

  export type AccountDataCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Event?: boolean | AccountDataCountOutputTypeCountEventArgs
  }

  // Custom InputTypes
  /**
   * AccountDataCountOutputType without action
   */
  export type AccountDataCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountDataCountOutputType
     */
    select?: AccountDataCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AccountDataCountOutputType without action
   */
  export type AccountDataCountOutputTypeCountEventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }


  /**
   * Count Type EventCountOutputType
   */

  export type EventCountOutputType = {
    EventPrice: number
  }

  export type EventCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    EventPrice?: boolean | EventCountOutputTypeCountEventPriceArgs
  }

  // Custom InputTypes
  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventCountOutputType
     */
    select?: EventCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountEventPriceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventPriceWhereInput
  }


  /**
   * Models
   */

  /**
   * Model AccountData
   */

  export type AggregateAccountData = {
    _count: AccountDataCountAggregateOutputType | null
    _avg: AccountDataAvgAggregateOutputType | null
    _sum: AccountDataSumAggregateOutputType | null
    _min: AccountDataMinAggregateOutputType | null
    _max: AccountDataMaxAggregateOutputType | null
  }

  export type AccountDataAvgAggregateOutputType = {
    id: number | null
  }

  export type AccountDataSumAggregateOutputType = {
    id: number | null
  }

  export type AccountDataMinAggregateOutputType = {
    id: number | null
    fullName: string | null
    email: string | null
    password: string | null
    is_verified: boolean | null
    type: $Enums.Type | null
    noPhone: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type AccountDataMaxAggregateOutputType = {
    id: number | null
    fullName: string | null
    email: string | null
    password: string | null
    is_verified: boolean | null
    type: $Enums.Type | null
    noPhone: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type AccountDataCountAggregateOutputType = {
    id: number
    fullName: number
    email: number
    password: number
    is_verified: number
    type: number
    noPhone: number
    updatedAt: number
    createdAt: number
    _all: number
  }


  export type AccountDataAvgAggregateInputType = {
    id?: true
  }

  export type AccountDataSumAggregateInputType = {
    id?: true
  }

  export type AccountDataMinAggregateInputType = {
    id?: true
    fullName?: true
    email?: true
    password?: true
    is_verified?: true
    type?: true
    noPhone?: true
    updatedAt?: true
    createdAt?: true
  }

  export type AccountDataMaxAggregateInputType = {
    id?: true
    fullName?: true
    email?: true
    password?: true
    is_verified?: true
    type?: true
    noPhone?: true
    updatedAt?: true
    createdAt?: true
  }

  export type AccountDataCountAggregateInputType = {
    id?: true
    fullName?: true
    email?: true
    password?: true
    is_verified?: true
    type?: true
    noPhone?: true
    updatedAt?: true
    createdAt?: true
    _all?: true
  }

  export type AccountDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountData to aggregate.
     */
    where?: AccountDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountData to fetch.
     */
    orderBy?: AccountDataOrderByWithRelationInput | AccountDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AccountData
    **/
    _count?: true | AccountDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountDataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountDataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountDataMaxAggregateInputType
  }

  export type GetAccountDataAggregateType<T extends AccountDataAggregateArgs> = {
        [P in keyof T & keyof AggregateAccountData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccountData[P]>
      : GetScalarType<T[P], AggregateAccountData[P]>
  }




  export type AccountDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountDataWhereInput
    orderBy?: AccountDataOrderByWithAggregationInput | AccountDataOrderByWithAggregationInput[]
    by: AccountDataScalarFieldEnum[] | AccountDataScalarFieldEnum
    having?: AccountDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountDataCountAggregateInputType | true
    _avg?: AccountDataAvgAggregateInputType
    _sum?: AccountDataSumAggregateInputType
    _min?: AccountDataMinAggregateInputType
    _max?: AccountDataMaxAggregateInputType
  }

  export type AccountDataGroupByOutputType = {
    id: number
    fullName: string
    email: string
    password: string
    is_verified: boolean
    type: $Enums.Type
    noPhone: string
    updatedAt: Date
    createdAt: Date
    _count: AccountDataCountAggregateOutputType | null
    _avg: AccountDataAvgAggregateOutputType | null
    _sum: AccountDataSumAggregateOutputType | null
    _min: AccountDataMinAggregateOutputType | null
    _max: AccountDataMaxAggregateOutputType | null
  }

  type GetAccountDataGroupByPayload<T extends AccountDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountDataGroupByOutputType[P]>
            : GetScalarType<T[P], AccountDataGroupByOutputType[P]>
        }
      >
    >


  export type AccountDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    email?: boolean
    password?: boolean
    is_verified?: boolean
    type?: boolean
    noPhone?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    userData?: boolean | UserDetailDefaultArgs<ExtArgs>
    Event?: boolean | AccountData$EventArgs<ExtArgs>
    _count?: boolean | AccountDataCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["accountData"]>


  export type AccountDataSelectScalar = {
    id?: boolean
    fullName?: boolean
    email?: boolean
    password?: boolean
    is_verified?: boolean
    type?: boolean
    noPhone?: boolean
    updatedAt?: boolean
    createdAt?: boolean
  }

  export type AccountDataInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userData?: boolean | UserDetailDefaultArgs<ExtArgs>
    Event?: boolean | AccountData$EventArgs<ExtArgs>
    _count?: boolean | AccountDataCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $AccountDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AccountData"
    objects: {
      userData: Prisma.$UserDetailPayload<ExtArgs>
      Event: Prisma.$EventPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fullName: string
      email: string
      password: string
      is_verified: boolean
      type: $Enums.Type
      noPhone: string
      updatedAt: Date
      createdAt: Date
    }, ExtArgs["result"]["accountData"]>
    composites: {}
  }

  type AccountDataGetPayload<S extends boolean | null | undefined | AccountDataDefaultArgs> = $Result.GetResult<Prisma.$AccountDataPayload, S>

  type AccountDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AccountDataFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AccountDataCountAggregateInputType | true
    }

  export interface AccountDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AccountData'], meta: { name: 'AccountData' } }
    /**
     * Find zero or one AccountData that matches the filter.
     * @param {AccountDataFindUniqueArgs} args - Arguments to find a AccountData
     * @example
     * // Get one AccountData
     * const accountData = await prisma.accountData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AccountDataFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AccountDataFindUniqueArgs<ExtArgs>>
    ): Prisma__AccountDataClient<$Result.GetResult<Prisma.$AccountDataPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one AccountData that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AccountDataFindUniqueOrThrowArgs} args - Arguments to find a AccountData
     * @example
     * // Get one AccountData
     * const accountData = await prisma.accountData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AccountDataFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountDataFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AccountDataClient<$Result.GetResult<Prisma.$AccountDataPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first AccountData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountDataFindFirstArgs} args - Arguments to find a AccountData
     * @example
     * // Get one AccountData
     * const accountData = await prisma.accountData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AccountDataFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountDataFindFirstArgs<ExtArgs>>
    ): Prisma__AccountDataClient<$Result.GetResult<Prisma.$AccountDataPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first AccountData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountDataFindFirstOrThrowArgs} args - Arguments to find a AccountData
     * @example
     * // Get one AccountData
     * const accountData = await prisma.accountData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AccountDataFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountDataFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AccountDataClient<$Result.GetResult<Prisma.$AccountDataPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more AccountData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountDataFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AccountData
     * const accountData = await prisma.accountData.findMany()
     * 
     * // Get first 10 AccountData
     * const accountData = await prisma.accountData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountDataWithIdOnly = await prisma.accountData.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AccountDataFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountDataFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountDataPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a AccountData.
     * @param {AccountDataCreateArgs} args - Arguments to create a AccountData.
     * @example
     * // Create one AccountData
     * const AccountData = await prisma.accountData.create({
     *   data: {
     *     // ... data to create a AccountData
     *   }
     * })
     * 
    **/
    create<T extends AccountDataCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AccountDataCreateArgs<ExtArgs>>
    ): Prisma__AccountDataClient<$Result.GetResult<Prisma.$AccountDataPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many AccountData.
     * @param {AccountDataCreateManyArgs} args - Arguments to create many AccountData.
     * @example
     * // Create many AccountData
     * const accountData = await prisma.accountData.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends AccountDataCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountDataCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AccountData.
     * @param {AccountDataDeleteArgs} args - Arguments to delete one AccountData.
     * @example
     * // Delete one AccountData
     * const AccountData = await prisma.accountData.delete({
     *   where: {
     *     // ... filter to delete one AccountData
     *   }
     * })
     * 
    **/
    delete<T extends AccountDataDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AccountDataDeleteArgs<ExtArgs>>
    ): Prisma__AccountDataClient<$Result.GetResult<Prisma.$AccountDataPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one AccountData.
     * @param {AccountDataUpdateArgs} args - Arguments to update one AccountData.
     * @example
     * // Update one AccountData
     * const accountData = await prisma.accountData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AccountDataUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AccountDataUpdateArgs<ExtArgs>>
    ): Prisma__AccountDataClient<$Result.GetResult<Prisma.$AccountDataPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more AccountData.
     * @param {AccountDataDeleteManyArgs} args - Arguments to filter AccountData to delete.
     * @example
     * // Delete a few AccountData
     * const { count } = await prisma.accountData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AccountDataDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountDataDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AccountData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AccountData
     * const accountData = await prisma.accountData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AccountDataUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AccountDataUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AccountData.
     * @param {AccountDataUpsertArgs} args - Arguments to update or create a AccountData.
     * @example
     * // Update or create a AccountData
     * const accountData = await prisma.accountData.upsert({
     *   create: {
     *     // ... data to create a AccountData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AccountData we want to update
     *   }
     * })
    **/
    upsert<T extends AccountDataUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AccountDataUpsertArgs<ExtArgs>>
    ): Prisma__AccountDataClient<$Result.GetResult<Prisma.$AccountDataPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of AccountData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountDataCountArgs} args - Arguments to filter AccountData to count.
     * @example
     * // Count the number of AccountData
     * const count = await prisma.accountData.count({
     *   where: {
     *     // ... the filter for the AccountData we want to count
     *   }
     * })
    **/
    count<T extends AccountDataCountArgs>(
      args?: Subset<T, AccountDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AccountData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountDataAggregateArgs>(args: Subset<T, AccountDataAggregateArgs>): Prisma.PrismaPromise<GetAccountDataAggregateType<T>>

    /**
     * Group by AccountData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountDataGroupByArgs['orderBy'] }
        : { orderBy?: AccountDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AccountData model
   */
  readonly fields: AccountDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AccountData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    userData<T extends UserDetailDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDetailDefaultArgs<ExtArgs>>): Prisma__UserDetailClient<$Result.GetResult<Prisma.$UserDetailPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Event<T extends AccountData$EventArgs<ExtArgs> = {}>(args?: Subset<T, AccountData$EventArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the AccountData model
   */ 
  interface AccountDataFieldRefs {
    readonly id: FieldRef<"AccountData", 'Int'>
    readonly fullName: FieldRef<"AccountData", 'String'>
    readonly email: FieldRef<"AccountData", 'String'>
    readonly password: FieldRef<"AccountData", 'String'>
    readonly is_verified: FieldRef<"AccountData", 'Boolean'>
    readonly type: FieldRef<"AccountData", 'Type'>
    readonly noPhone: FieldRef<"AccountData", 'String'>
    readonly updatedAt: FieldRef<"AccountData", 'DateTime'>
    readonly createdAt: FieldRef<"AccountData", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AccountData findUnique
   */
  export type AccountDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountData
     */
    select?: AccountDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountDataInclude<ExtArgs> | null
    /**
     * Filter, which AccountData to fetch.
     */
    where: AccountDataWhereUniqueInput
  }

  /**
   * AccountData findUniqueOrThrow
   */
  export type AccountDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountData
     */
    select?: AccountDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountDataInclude<ExtArgs> | null
    /**
     * Filter, which AccountData to fetch.
     */
    where: AccountDataWhereUniqueInput
  }

  /**
   * AccountData findFirst
   */
  export type AccountDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountData
     */
    select?: AccountDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountDataInclude<ExtArgs> | null
    /**
     * Filter, which AccountData to fetch.
     */
    where?: AccountDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountData to fetch.
     */
    orderBy?: AccountDataOrderByWithRelationInput | AccountDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountData.
     */
    cursor?: AccountDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountData.
     */
    distinct?: AccountDataScalarFieldEnum | AccountDataScalarFieldEnum[]
  }

  /**
   * AccountData findFirstOrThrow
   */
  export type AccountDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountData
     */
    select?: AccountDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountDataInclude<ExtArgs> | null
    /**
     * Filter, which AccountData to fetch.
     */
    where?: AccountDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountData to fetch.
     */
    orderBy?: AccountDataOrderByWithRelationInput | AccountDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountData.
     */
    cursor?: AccountDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountData.
     */
    distinct?: AccountDataScalarFieldEnum | AccountDataScalarFieldEnum[]
  }

  /**
   * AccountData findMany
   */
  export type AccountDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountData
     */
    select?: AccountDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountDataInclude<ExtArgs> | null
    /**
     * Filter, which AccountData to fetch.
     */
    where?: AccountDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountData to fetch.
     */
    orderBy?: AccountDataOrderByWithRelationInput | AccountDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AccountData.
     */
    cursor?: AccountDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountData.
     */
    skip?: number
    distinct?: AccountDataScalarFieldEnum | AccountDataScalarFieldEnum[]
  }

  /**
   * AccountData create
   */
  export type AccountDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountData
     */
    select?: AccountDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountDataInclude<ExtArgs> | null
    /**
     * The data needed to create a AccountData.
     */
    data: XOR<AccountDataCreateInput, AccountDataUncheckedCreateInput>
  }

  /**
   * AccountData createMany
   */
  export type AccountDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AccountData.
     */
    data: AccountDataCreateManyInput | AccountDataCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AccountData update
   */
  export type AccountDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountData
     */
    select?: AccountDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountDataInclude<ExtArgs> | null
    /**
     * The data needed to update a AccountData.
     */
    data: XOR<AccountDataUpdateInput, AccountDataUncheckedUpdateInput>
    /**
     * Choose, which AccountData to update.
     */
    where: AccountDataWhereUniqueInput
  }

  /**
   * AccountData updateMany
   */
  export type AccountDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AccountData.
     */
    data: XOR<AccountDataUpdateManyMutationInput, AccountDataUncheckedUpdateManyInput>
    /**
     * Filter which AccountData to update
     */
    where?: AccountDataWhereInput
  }

  /**
   * AccountData upsert
   */
  export type AccountDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountData
     */
    select?: AccountDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountDataInclude<ExtArgs> | null
    /**
     * The filter to search for the AccountData to update in case it exists.
     */
    where: AccountDataWhereUniqueInput
    /**
     * In case the AccountData found by the `where` argument doesn't exist, create a new AccountData with this data.
     */
    create: XOR<AccountDataCreateInput, AccountDataUncheckedCreateInput>
    /**
     * In case the AccountData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountDataUpdateInput, AccountDataUncheckedUpdateInput>
  }

  /**
   * AccountData delete
   */
  export type AccountDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountData
     */
    select?: AccountDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountDataInclude<ExtArgs> | null
    /**
     * Filter which AccountData to delete.
     */
    where: AccountDataWhereUniqueInput
  }

  /**
   * AccountData deleteMany
   */
  export type AccountDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountData to delete
     */
    where?: AccountDataWhereInput
  }

  /**
   * AccountData.Event
   */
  export type AccountData$EventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * AccountData without action
   */
  export type AccountDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountData
     */
    select?: AccountDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountDataInclude<ExtArgs> | null
  }


  /**
   * Model UserDetail
   */

  export type AggregateUserDetail = {
    _count: UserDetailCountAggregateOutputType | null
    _avg: UserDetailAvgAggregateOutputType | null
    _sum: UserDetailSumAggregateOutputType | null
    _min: UserDetailMinAggregateOutputType | null
    _max: UserDetailMaxAggregateOutputType | null
  }

  export type UserDetailAvgAggregateOutputType = {
    id: number | null
    promoId: number | null
    point: number | null
  }

  export type UserDetailSumAggregateOutputType = {
    id: number | null
    promoId: number | null
    point: number | null
  }

  export type UserDetailMinAggregateOutputType = {
    id: number | null
    promoId: number | null
    point: number | null
    referalCode: string | null
    yourReferalCode: string | null
    expReferalCode: Date | null
  }

  export type UserDetailMaxAggregateOutputType = {
    id: number | null
    promoId: number | null
    point: number | null
    referalCode: string | null
    yourReferalCode: string | null
    expReferalCode: Date | null
  }

  export type UserDetailCountAggregateOutputType = {
    id: number
    promoId: number
    point: number
    referalCode: number
    yourReferalCode: number
    expReferalCode: number
    _all: number
  }


  export type UserDetailAvgAggregateInputType = {
    id?: true
    promoId?: true
    point?: true
  }

  export type UserDetailSumAggregateInputType = {
    id?: true
    promoId?: true
    point?: true
  }

  export type UserDetailMinAggregateInputType = {
    id?: true
    promoId?: true
    point?: true
    referalCode?: true
    yourReferalCode?: true
    expReferalCode?: true
  }

  export type UserDetailMaxAggregateInputType = {
    id?: true
    promoId?: true
    point?: true
    referalCode?: true
    yourReferalCode?: true
    expReferalCode?: true
  }

  export type UserDetailCountAggregateInputType = {
    id?: true
    promoId?: true
    point?: true
    referalCode?: true
    yourReferalCode?: true
    expReferalCode?: true
    _all?: true
  }

  export type UserDetailAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserDetail to aggregate.
     */
    where?: UserDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserDetails to fetch.
     */
    orderBy?: UserDetailOrderByWithRelationInput | UserDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserDetails
    **/
    _count?: true | UserDetailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserDetailAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserDetailSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserDetailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserDetailMaxAggregateInputType
  }

  export type GetUserDetailAggregateType<T extends UserDetailAggregateArgs> = {
        [P in keyof T & keyof AggregateUserDetail]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserDetail[P]>
      : GetScalarType<T[P], AggregateUserDetail[P]>
  }




  export type UserDetailGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserDetailWhereInput
    orderBy?: UserDetailOrderByWithAggregationInput | UserDetailOrderByWithAggregationInput[]
    by: UserDetailScalarFieldEnum[] | UserDetailScalarFieldEnum
    having?: UserDetailScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserDetailCountAggregateInputType | true
    _avg?: UserDetailAvgAggregateInputType
    _sum?: UserDetailSumAggregateInputType
    _min?: UserDetailMinAggregateInputType
    _max?: UserDetailMaxAggregateInputType
  }

  export type UserDetailGroupByOutputType = {
    id: number
    promoId: number | null
    point: number
    referalCode: string | null
    yourReferalCode: string | null
    expReferalCode: Date | null
    _count: UserDetailCountAggregateOutputType | null
    _avg: UserDetailAvgAggregateOutputType | null
    _sum: UserDetailSumAggregateOutputType | null
    _min: UserDetailMinAggregateOutputType | null
    _max: UserDetailMaxAggregateOutputType | null
  }

  type GetUserDetailGroupByPayload<T extends UserDetailGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserDetailGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserDetailGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserDetailGroupByOutputType[P]>
            : GetScalarType<T[P], UserDetailGroupByOutputType[P]>
        }
      >
    >


  export type UserDetailSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    promoId?: boolean
    point?: boolean
    referalCode?: boolean
    yourReferalCode?: boolean
    expReferalCode?: boolean
    AccountData?: boolean | UserDetail$AccountDataArgs<ExtArgs>
  }, ExtArgs["result"]["userDetail"]>


  export type UserDetailSelectScalar = {
    id?: boolean
    promoId?: boolean
    point?: boolean
    referalCode?: boolean
    yourReferalCode?: boolean
    expReferalCode?: boolean
  }

  export type UserDetailInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    AccountData?: boolean | UserDetail$AccountDataArgs<ExtArgs>
  }

  export type $UserDetailPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserDetail"
    objects: {
      AccountData: Prisma.$AccountDataPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      promoId: number | null
      point: number
      referalCode: string | null
      yourReferalCode: string | null
      expReferalCode: Date | null
    }, ExtArgs["result"]["userDetail"]>
    composites: {}
  }

  type UserDetailGetPayload<S extends boolean | null | undefined | UserDetailDefaultArgs> = $Result.GetResult<Prisma.$UserDetailPayload, S>

  type UserDetailCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserDetailFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserDetailCountAggregateInputType | true
    }

  export interface UserDetailDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserDetail'], meta: { name: 'UserDetail' } }
    /**
     * Find zero or one UserDetail that matches the filter.
     * @param {UserDetailFindUniqueArgs} args - Arguments to find a UserDetail
     * @example
     * // Get one UserDetail
     * const userDetail = await prisma.userDetail.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserDetailFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserDetailFindUniqueArgs<ExtArgs>>
    ): Prisma__UserDetailClient<$Result.GetResult<Prisma.$UserDetailPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one UserDetail that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserDetailFindUniqueOrThrowArgs} args - Arguments to find a UserDetail
     * @example
     * // Get one UserDetail
     * const userDetail = await prisma.userDetail.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserDetailFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDetailFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserDetailClient<$Result.GetResult<Prisma.$UserDetailPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first UserDetail that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDetailFindFirstArgs} args - Arguments to find a UserDetail
     * @example
     * // Get one UserDetail
     * const userDetail = await prisma.userDetail.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserDetailFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDetailFindFirstArgs<ExtArgs>>
    ): Prisma__UserDetailClient<$Result.GetResult<Prisma.$UserDetailPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first UserDetail that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDetailFindFirstOrThrowArgs} args - Arguments to find a UserDetail
     * @example
     * // Get one UserDetail
     * const userDetail = await prisma.userDetail.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserDetailFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDetailFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserDetailClient<$Result.GetResult<Prisma.$UserDetailPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more UserDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDetailFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserDetails
     * const userDetails = await prisma.userDetail.findMany()
     * 
     * // Get first 10 UserDetails
     * const userDetails = await prisma.userDetail.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userDetailWithIdOnly = await prisma.userDetail.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserDetailFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDetailFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserDetailPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a UserDetail.
     * @param {UserDetailCreateArgs} args - Arguments to create a UserDetail.
     * @example
     * // Create one UserDetail
     * const UserDetail = await prisma.userDetail.create({
     *   data: {
     *     // ... data to create a UserDetail
     *   }
     * })
     * 
    **/
    create<T extends UserDetailCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserDetailCreateArgs<ExtArgs>>
    ): Prisma__UserDetailClient<$Result.GetResult<Prisma.$UserDetailPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many UserDetails.
     * @param {UserDetailCreateManyArgs} args - Arguments to create many UserDetails.
     * @example
     * // Create many UserDetails
     * const userDetail = await prisma.userDetail.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends UserDetailCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDetailCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserDetail.
     * @param {UserDetailDeleteArgs} args - Arguments to delete one UserDetail.
     * @example
     * // Delete one UserDetail
     * const UserDetail = await prisma.userDetail.delete({
     *   where: {
     *     // ... filter to delete one UserDetail
     *   }
     * })
     * 
    **/
    delete<T extends UserDetailDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDetailDeleteArgs<ExtArgs>>
    ): Prisma__UserDetailClient<$Result.GetResult<Prisma.$UserDetailPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one UserDetail.
     * @param {UserDetailUpdateArgs} args - Arguments to update one UserDetail.
     * @example
     * // Update one UserDetail
     * const userDetail = await prisma.userDetail.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserDetailUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserDetailUpdateArgs<ExtArgs>>
    ): Prisma__UserDetailClient<$Result.GetResult<Prisma.$UserDetailPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more UserDetails.
     * @param {UserDetailDeleteManyArgs} args - Arguments to filter UserDetails to delete.
     * @example
     * // Delete a few UserDetails
     * const { count } = await prisma.userDetail.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDetailDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDetailDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDetailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserDetails
     * const userDetail = await prisma.userDetail.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserDetailUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserDetailUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserDetail.
     * @param {UserDetailUpsertArgs} args - Arguments to update or create a UserDetail.
     * @example
     * // Update or create a UserDetail
     * const userDetail = await prisma.userDetail.upsert({
     *   create: {
     *     // ... data to create a UserDetail
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserDetail we want to update
     *   }
     * })
    **/
    upsert<T extends UserDetailUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserDetailUpsertArgs<ExtArgs>>
    ): Prisma__UserDetailClient<$Result.GetResult<Prisma.$UserDetailPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of UserDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDetailCountArgs} args - Arguments to filter UserDetails to count.
     * @example
     * // Count the number of UserDetails
     * const count = await prisma.userDetail.count({
     *   where: {
     *     // ... the filter for the UserDetails we want to count
     *   }
     * })
    **/
    count<T extends UserDetailCountArgs>(
      args?: Subset<T, UserDetailCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserDetailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserDetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDetailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserDetailAggregateArgs>(args: Subset<T, UserDetailAggregateArgs>): Prisma.PrismaPromise<GetUserDetailAggregateType<T>>

    /**
     * Group by UserDetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDetailGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserDetailGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserDetailGroupByArgs['orderBy'] }
        : { orderBy?: UserDetailGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserDetailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserDetailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserDetail model
   */
  readonly fields: UserDetailFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserDetail.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserDetailClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    AccountData<T extends UserDetail$AccountDataArgs<ExtArgs> = {}>(args?: Subset<T, UserDetail$AccountDataArgs<ExtArgs>>): Prisma__AccountDataClient<$Result.GetResult<Prisma.$AccountDataPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the UserDetail model
   */ 
  interface UserDetailFieldRefs {
    readonly id: FieldRef<"UserDetail", 'Int'>
    readonly promoId: FieldRef<"UserDetail", 'Int'>
    readonly point: FieldRef<"UserDetail", 'Int'>
    readonly referalCode: FieldRef<"UserDetail", 'String'>
    readonly yourReferalCode: FieldRef<"UserDetail", 'String'>
    readonly expReferalCode: FieldRef<"UserDetail", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserDetail findUnique
   */
  export type UserDetailFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDetail
     */
    select?: UserDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDetailInclude<ExtArgs> | null
    /**
     * Filter, which UserDetail to fetch.
     */
    where: UserDetailWhereUniqueInput
  }

  /**
   * UserDetail findUniqueOrThrow
   */
  export type UserDetailFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDetail
     */
    select?: UserDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDetailInclude<ExtArgs> | null
    /**
     * Filter, which UserDetail to fetch.
     */
    where: UserDetailWhereUniqueInput
  }

  /**
   * UserDetail findFirst
   */
  export type UserDetailFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDetail
     */
    select?: UserDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDetailInclude<ExtArgs> | null
    /**
     * Filter, which UserDetail to fetch.
     */
    where?: UserDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserDetails to fetch.
     */
    orderBy?: UserDetailOrderByWithRelationInput | UserDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserDetails.
     */
    cursor?: UserDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserDetails.
     */
    distinct?: UserDetailScalarFieldEnum | UserDetailScalarFieldEnum[]
  }

  /**
   * UserDetail findFirstOrThrow
   */
  export type UserDetailFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDetail
     */
    select?: UserDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDetailInclude<ExtArgs> | null
    /**
     * Filter, which UserDetail to fetch.
     */
    where?: UserDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserDetails to fetch.
     */
    orderBy?: UserDetailOrderByWithRelationInput | UserDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserDetails.
     */
    cursor?: UserDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserDetails.
     */
    distinct?: UserDetailScalarFieldEnum | UserDetailScalarFieldEnum[]
  }

  /**
   * UserDetail findMany
   */
  export type UserDetailFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDetail
     */
    select?: UserDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDetailInclude<ExtArgs> | null
    /**
     * Filter, which UserDetails to fetch.
     */
    where?: UserDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserDetails to fetch.
     */
    orderBy?: UserDetailOrderByWithRelationInput | UserDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserDetails.
     */
    cursor?: UserDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserDetails.
     */
    skip?: number
    distinct?: UserDetailScalarFieldEnum | UserDetailScalarFieldEnum[]
  }

  /**
   * UserDetail create
   */
  export type UserDetailCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDetail
     */
    select?: UserDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDetailInclude<ExtArgs> | null
    /**
     * The data needed to create a UserDetail.
     */
    data?: XOR<UserDetailCreateInput, UserDetailUncheckedCreateInput>
  }

  /**
   * UserDetail createMany
   */
  export type UserDetailCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserDetails.
     */
    data: UserDetailCreateManyInput | UserDetailCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserDetail update
   */
  export type UserDetailUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDetail
     */
    select?: UserDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDetailInclude<ExtArgs> | null
    /**
     * The data needed to update a UserDetail.
     */
    data: XOR<UserDetailUpdateInput, UserDetailUncheckedUpdateInput>
    /**
     * Choose, which UserDetail to update.
     */
    where: UserDetailWhereUniqueInput
  }

  /**
   * UserDetail updateMany
   */
  export type UserDetailUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserDetails.
     */
    data: XOR<UserDetailUpdateManyMutationInput, UserDetailUncheckedUpdateManyInput>
    /**
     * Filter which UserDetails to update
     */
    where?: UserDetailWhereInput
  }

  /**
   * UserDetail upsert
   */
  export type UserDetailUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDetail
     */
    select?: UserDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDetailInclude<ExtArgs> | null
    /**
     * The filter to search for the UserDetail to update in case it exists.
     */
    where: UserDetailWhereUniqueInput
    /**
     * In case the UserDetail found by the `where` argument doesn't exist, create a new UserDetail with this data.
     */
    create: XOR<UserDetailCreateInput, UserDetailUncheckedCreateInput>
    /**
     * In case the UserDetail was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserDetailUpdateInput, UserDetailUncheckedUpdateInput>
  }

  /**
   * UserDetail delete
   */
  export type UserDetailDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDetail
     */
    select?: UserDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDetailInclude<ExtArgs> | null
    /**
     * Filter which UserDetail to delete.
     */
    where: UserDetailWhereUniqueInput
  }

  /**
   * UserDetail deleteMany
   */
  export type UserDetailDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserDetails to delete
     */
    where?: UserDetailWhereInput
  }

  /**
   * UserDetail.AccountData
   */
  export type UserDetail$AccountDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountData
     */
    select?: AccountDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountDataInclude<ExtArgs> | null
    where?: AccountDataWhereInput
  }

  /**
   * UserDetail without action
   */
  export type UserDetailDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDetail
     */
    select?: UserDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDetailInclude<ExtArgs> | null
  }


  /**
   * Model Event
   */

  export type AggregateEvent = {
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  export type EventAvgAggregateOutputType = {
    id: number | null
    adminId: number | null
    promo: number | null
  }

  export type EventSumAggregateOutputType = {
    id: number | null
    adminId: number | null
    promo: number | null
  }

  export type EventMinAggregateOutputType = {
    id: number | null
    adminId: number | null
    title: string | null
    status: $Enums.Status | null
    category: $Enums.Category | null
    location: string | null
    imgEvent: Buffer | null
    imgSeat: Buffer | null
    date: string | null
    startTime: string | null
    finishTime: string | null
    city: $Enums.City | null
    desc: string | null
    promo: number | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type EventMaxAggregateOutputType = {
    id: number | null
    adminId: number | null
    title: string | null
    status: $Enums.Status | null
    category: $Enums.Category | null
    location: string | null
    imgEvent: Buffer | null
    imgSeat: Buffer | null
    date: string | null
    startTime: string | null
    finishTime: string | null
    city: $Enums.City | null
    desc: string | null
    promo: number | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type EventCountAggregateOutputType = {
    id: number
    adminId: number
    title: number
    status: number
    category: number
    location: number
    imgEvent: number
    imgSeat: number
    date: number
    startTime: number
    finishTime: number
    city: number
    desc: number
    promo: number
    updatedAt: number
    createdAt: number
    _all: number
  }


  export type EventAvgAggregateInputType = {
    id?: true
    adminId?: true
    promo?: true
  }

  export type EventSumAggregateInputType = {
    id?: true
    adminId?: true
    promo?: true
  }

  export type EventMinAggregateInputType = {
    id?: true
    adminId?: true
    title?: true
    status?: true
    category?: true
    location?: true
    imgEvent?: true
    imgSeat?: true
    date?: true
    startTime?: true
    finishTime?: true
    city?: true
    desc?: true
    promo?: true
    updatedAt?: true
    createdAt?: true
  }

  export type EventMaxAggregateInputType = {
    id?: true
    adminId?: true
    title?: true
    status?: true
    category?: true
    location?: true
    imgEvent?: true
    imgSeat?: true
    date?: true
    startTime?: true
    finishTime?: true
    city?: true
    desc?: true
    promo?: true
    updatedAt?: true
    createdAt?: true
  }

  export type EventCountAggregateInputType = {
    id?: true
    adminId?: true
    title?: true
    status?: true
    category?: true
    location?: true
    imgEvent?: true
    imgSeat?: true
    date?: true
    startTime?: true
    finishTime?: true
    city?: true
    desc?: true
    promo?: true
    updatedAt?: true
    createdAt?: true
    _all?: true
  }

  export type EventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Event to aggregate.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventMaxAggregateInputType
  }

  export type GetEventAggregateType<T extends EventAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent[P]>
      : GetScalarType<T[P], AggregateEvent[P]>
  }




  export type EventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
    orderBy?: EventOrderByWithAggregationInput | EventOrderByWithAggregationInput[]
    by: EventScalarFieldEnum[] | EventScalarFieldEnum
    having?: EventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventCountAggregateInputType | true
    _avg?: EventAvgAggregateInputType
    _sum?: EventSumAggregateInputType
    _min?: EventMinAggregateInputType
    _max?: EventMaxAggregateInputType
  }

  export type EventGroupByOutputType = {
    id: number
    adminId: number
    title: string
    status: $Enums.Status
    category: $Enums.Category
    location: string
    imgEvent: Buffer | null
    imgSeat: Buffer | null
    date: string
    startTime: string
    finishTime: string
    city: $Enums.City
    desc: string
    promo: number | null
    updatedAt: Date
    createdAt: Date
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  type GetEventGroupByPayload<T extends EventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventGroupByOutputType[P]>
            : GetScalarType<T[P], EventGroupByOutputType[P]>
        }
      >
    >


  export type EventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adminId?: boolean
    title?: boolean
    status?: boolean
    category?: boolean
    location?: boolean
    imgEvent?: boolean
    imgSeat?: boolean
    date?: boolean
    startTime?: boolean
    finishTime?: boolean
    city?: boolean
    desc?: boolean
    promo?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    admin?: boolean | AccountDataDefaultArgs<ExtArgs>
    EventPrice?: boolean | Event$EventPriceArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>


  export type EventSelectScalar = {
    id?: boolean
    adminId?: boolean
    title?: boolean
    status?: boolean
    category?: boolean
    location?: boolean
    imgEvent?: boolean
    imgSeat?: boolean
    date?: boolean
    startTime?: boolean
    finishTime?: boolean
    city?: boolean
    desc?: boolean
    promo?: boolean
    updatedAt?: boolean
    createdAt?: boolean
  }

  export type EventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AccountDataDefaultArgs<ExtArgs>
    EventPrice?: boolean | Event$EventPriceArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $EventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Event"
    objects: {
      admin: Prisma.$AccountDataPayload<ExtArgs>
      EventPrice: Prisma.$EventPricePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      adminId: number
      title: string
      status: $Enums.Status
      category: $Enums.Category
      location: string
      imgEvent: Buffer | null
      imgSeat: Buffer | null
      date: string
      startTime: string
      finishTime: string
      city: $Enums.City
      desc: string
      promo: number | null
      updatedAt: Date
      createdAt: Date
    }, ExtArgs["result"]["event"]>
    composites: {}
  }

  type EventGetPayload<S extends boolean | null | undefined | EventDefaultArgs> = $Result.GetResult<Prisma.$EventPayload, S>

  type EventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EventCountAggregateInputType | true
    }

  export interface EventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Event'], meta: { name: 'Event' } }
    /**
     * Find zero or one Event that matches the filter.
     * @param {EventFindUniqueArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EventFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EventFindUniqueArgs<ExtArgs>>
    ): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Event that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EventFindUniqueOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EventFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EventFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Event that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EventFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EventFindFirstArgs<ExtArgs>>
    ): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Event that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EventFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EventFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.event.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.event.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventWithIdOnly = await prisma.event.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EventFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Event.
     * @param {EventCreateArgs} args - Arguments to create a Event.
     * @example
     * // Create one Event
     * const Event = await prisma.event.create({
     *   data: {
     *     // ... data to create a Event
     *   }
     * })
     * 
    **/
    create<T extends EventCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EventCreateArgs<ExtArgs>>
    ): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Events.
     * @param {EventCreateManyArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends EventCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Event.
     * @param {EventDeleteArgs} args - Arguments to delete one Event.
     * @example
     * // Delete one Event
     * const Event = await prisma.event.delete({
     *   where: {
     *     // ... filter to delete one Event
     *   }
     * })
     * 
    **/
    delete<T extends EventDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EventDeleteArgs<ExtArgs>>
    ): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Event.
     * @param {EventUpdateArgs} args - Arguments to update one Event.
     * @example
     * // Update one Event
     * const event = await prisma.event.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EventUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EventUpdateArgs<ExtArgs>>
    ): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Events.
     * @param {EventDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.event.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EventDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EventUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EventUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Event.
     * @param {EventUpsertArgs} args - Arguments to update or create a Event.
     * @example
     * // Update or create a Event
     * const event = await prisma.event.upsert({
     *   create: {
     *     // ... data to create a Event
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event we want to update
     *   }
     * })
    **/
    upsert<T extends EventUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EventUpsertArgs<ExtArgs>>
    ): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.event.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventCountArgs>(
      args?: Subset<T, EventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAggregateArgs>(args: Subset<T, EventAggregateArgs>): Prisma.PrismaPromise<GetEventAggregateType<T>>

    /**
     * Group by Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventGroupByArgs['orderBy'] }
        : { orderBy?: EventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Event model
   */
  readonly fields: EventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Event.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    admin<T extends AccountDataDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountDataDefaultArgs<ExtArgs>>): Prisma__AccountDataClient<$Result.GetResult<Prisma.$AccountDataPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    EventPrice<T extends Event$EventPriceArgs<ExtArgs> = {}>(args?: Subset<T, Event$EventPriceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPricePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Event model
   */ 
  interface EventFieldRefs {
    readonly id: FieldRef<"Event", 'Int'>
    readonly adminId: FieldRef<"Event", 'Int'>
    readonly title: FieldRef<"Event", 'String'>
    readonly status: FieldRef<"Event", 'Status'>
    readonly category: FieldRef<"Event", 'Category'>
    readonly location: FieldRef<"Event", 'String'>
    readonly imgEvent: FieldRef<"Event", 'Bytes'>
    readonly imgSeat: FieldRef<"Event", 'Bytes'>
    readonly date: FieldRef<"Event", 'String'>
    readonly startTime: FieldRef<"Event", 'String'>
    readonly finishTime: FieldRef<"Event", 'String'>
    readonly city: FieldRef<"Event", 'City'>
    readonly desc: FieldRef<"Event", 'String'>
    readonly promo: FieldRef<"Event", 'Float'>
    readonly updatedAt: FieldRef<"Event", 'DateTime'>
    readonly createdAt: FieldRef<"Event", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Event findUnique
   */
  export type EventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findUniqueOrThrow
   */
  export type EventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findFirst
   */
  export type EventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findFirstOrThrow
   */
  export type EventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findMany
   */
  export type EventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event create
   */
  export type EventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to create a Event.
     */
    data: XOR<EventCreateInput, EventUncheckedCreateInput>
  }

  /**
   * Event createMany
   */
  export type EventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Event update
   */
  export type EventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to update a Event.
     */
    data: XOR<EventUpdateInput, EventUncheckedUpdateInput>
    /**
     * Choose, which Event to update.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event updateMany
   */
  export type EventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
  }

  /**
   * Event upsert
   */
  export type EventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The filter to search for the Event to update in case it exists.
     */
    where: EventWhereUniqueInput
    /**
     * In case the Event found by the `where` argument doesn't exist, create a new Event with this data.
     */
    create: XOR<EventCreateInput, EventUncheckedCreateInput>
    /**
     * In case the Event was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventUpdateInput, EventUncheckedUpdateInput>
  }

  /**
   * Event delete
   */
  export type EventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter which Event to delete.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event deleteMany
   */
  export type EventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to delete
     */
    where?: EventWhereInput
  }

  /**
   * Event.EventPrice
   */
  export type Event$EventPriceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventPrice
     */
    select?: EventPriceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventPriceInclude<ExtArgs> | null
    where?: EventPriceWhereInput
    orderBy?: EventPriceOrderByWithRelationInput | EventPriceOrderByWithRelationInput[]
    cursor?: EventPriceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventPriceScalarFieldEnum | EventPriceScalarFieldEnum[]
  }

  /**
   * Event without action
   */
  export type EventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
  }


  /**
   * Model EventPrice
   */

  export type AggregateEventPrice = {
    _count: EventPriceCountAggregateOutputType | null
    _avg: EventPriceAvgAggregateOutputType | null
    _sum: EventPriceSumAggregateOutputType | null
    _min: EventPriceMinAggregateOutputType | null
    _max: EventPriceMaxAggregateOutputType | null
  }

  export type EventPriceAvgAggregateOutputType = {
    id: number | null
    qty: number | null
    price: number | null
    eventId: number | null
  }

  export type EventPriceSumAggregateOutputType = {
    id: number | null
    qty: number | null
    price: number | null
    eventId: number | null
  }

  export type EventPriceMinAggregateOutputType = {
    id: number | null
    categoryEvent: string | null
    qty: number | null
    price: number | null
    updatedAt: Date | null
    createdAt: Date | null
    eventId: number | null
  }

  export type EventPriceMaxAggregateOutputType = {
    id: number | null
    categoryEvent: string | null
    qty: number | null
    price: number | null
    updatedAt: Date | null
    createdAt: Date | null
    eventId: number | null
  }

  export type EventPriceCountAggregateOutputType = {
    id: number
    categoryEvent: number
    qty: number
    price: number
    updatedAt: number
    createdAt: number
    eventId: number
    _all: number
  }


  export type EventPriceAvgAggregateInputType = {
    id?: true
    qty?: true
    price?: true
    eventId?: true
  }

  export type EventPriceSumAggregateInputType = {
    id?: true
    qty?: true
    price?: true
    eventId?: true
  }

  export type EventPriceMinAggregateInputType = {
    id?: true
    categoryEvent?: true
    qty?: true
    price?: true
    updatedAt?: true
    createdAt?: true
    eventId?: true
  }

  export type EventPriceMaxAggregateInputType = {
    id?: true
    categoryEvent?: true
    qty?: true
    price?: true
    updatedAt?: true
    createdAt?: true
    eventId?: true
  }

  export type EventPriceCountAggregateInputType = {
    id?: true
    categoryEvent?: true
    qty?: true
    price?: true
    updatedAt?: true
    createdAt?: true
    eventId?: true
    _all?: true
  }

  export type EventPriceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventPrice to aggregate.
     */
    where?: EventPriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventPrices to fetch.
     */
    orderBy?: EventPriceOrderByWithRelationInput | EventPriceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventPriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventPrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventPrices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EventPrices
    **/
    _count?: true | EventPriceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventPriceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventPriceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventPriceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventPriceMaxAggregateInputType
  }

  export type GetEventPriceAggregateType<T extends EventPriceAggregateArgs> = {
        [P in keyof T & keyof AggregateEventPrice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEventPrice[P]>
      : GetScalarType<T[P], AggregateEventPrice[P]>
  }




  export type EventPriceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventPriceWhereInput
    orderBy?: EventPriceOrderByWithAggregationInput | EventPriceOrderByWithAggregationInput[]
    by: EventPriceScalarFieldEnum[] | EventPriceScalarFieldEnum
    having?: EventPriceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventPriceCountAggregateInputType | true
    _avg?: EventPriceAvgAggregateInputType
    _sum?: EventPriceSumAggregateInputType
    _min?: EventPriceMinAggregateInputType
    _max?: EventPriceMaxAggregateInputType
  }

  export type EventPriceGroupByOutputType = {
    id: number
    categoryEvent: string | null
    qty: number
    price: number
    updatedAt: Date
    createdAt: Date
    eventId: number | null
    _count: EventPriceCountAggregateOutputType | null
    _avg: EventPriceAvgAggregateOutputType | null
    _sum: EventPriceSumAggregateOutputType | null
    _min: EventPriceMinAggregateOutputType | null
    _max: EventPriceMaxAggregateOutputType | null
  }

  type GetEventPriceGroupByPayload<T extends EventPriceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventPriceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventPriceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventPriceGroupByOutputType[P]>
            : GetScalarType<T[P], EventPriceGroupByOutputType[P]>
        }
      >
    >


  export type EventPriceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    categoryEvent?: boolean
    qty?: boolean
    price?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    eventId?: boolean
    Event?: boolean | EventPrice$EventArgs<ExtArgs>
  }, ExtArgs["result"]["eventPrice"]>


  export type EventPriceSelectScalar = {
    id?: boolean
    categoryEvent?: boolean
    qty?: boolean
    price?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    eventId?: boolean
  }

  export type EventPriceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Event?: boolean | EventPrice$EventArgs<ExtArgs>
  }

  export type $EventPricePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EventPrice"
    objects: {
      Event: Prisma.$EventPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      categoryEvent: string | null
      qty: number
      price: number
      updatedAt: Date
      createdAt: Date
      eventId: number | null
    }, ExtArgs["result"]["eventPrice"]>
    composites: {}
  }

  type EventPriceGetPayload<S extends boolean | null | undefined | EventPriceDefaultArgs> = $Result.GetResult<Prisma.$EventPricePayload, S>

  type EventPriceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EventPriceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EventPriceCountAggregateInputType | true
    }

  export interface EventPriceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EventPrice'], meta: { name: 'EventPrice' } }
    /**
     * Find zero or one EventPrice that matches the filter.
     * @param {EventPriceFindUniqueArgs} args - Arguments to find a EventPrice
     * @example
     * // Get one EventPrice
     * const eventPrice = await prisma.eventPrice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EventPriceFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EventPriceFindUniqueArgs<ExtArgs>>
    ): Prisma__EventPriceClient<$Result.GetResult<Prisma.$EventPricePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one EventPrice that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EventPriceFindUniqueOrThrowArgs} args - Arguments to find a EventPrice
     * @example
     * // Get one EventPrice
     * const eventPrice = await prisma.eventPrice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EventPriceFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EventPriceFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EventPriceClient<$Result.GetResult<Prisma.$EventPricePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first EventPrice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventPriceFindFirstArgs} args - Arguments to find a EventPrice
     * @example
     * // Get one EventPrice
     * const eventPrice = await prisma.eventPrice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EventPriceFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EventPriceFindFirstArgs<ExtArgs>>
    ): Prisma__EventPriceClient<$Result.GetResult<Prisma.$EventPricePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first EventPrice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventPriceFindFirstOrThrowArgs} args - Arguments to find a EventPrice
     * @example
     * // Get one EventPrice
     * const eventPrice = await prisma.eventPrice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EventPriceFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EventPriceFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EventPriceClient<$Result.GetResult<Prisma.$EventPricePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more EventPrices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventPriceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EventPrices
     * const eventPrices = await prisma.eventPrice.findMany()
     * 
     * // Get first 10 EventPrices
     * const eventPrices = await prisma.eventPrice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventPriceWithIdOnly = await prisma.eventPrice.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EventPriceFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventPriceFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPricePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a EventPrice.
     * @param {EventPriceCreateArgs} args - Arguments to create a EventPrice.
     * @example
     * // Create one EventPrice
     * const EventPrice = await prisma.eventPrice.create({
     *   data: {
     *     // ... data to create a EventPrice
     *   }
     * })
     * 
    **/
    create<T extends EventPriceCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EventPriceCreateArgs<ExtArgs>>
    ): Prisma__EventPriceClient<$Result.GetResult<Prisma.$EventPricePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many EventPrices.
     * @param {EventPriceCreateManyArgs} args - Arguments to create many EventPrices.
     * @example
     * // Create many EventPrices
     * const eventPrice = await prisma.eventPrice.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends EventPriceCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventPriceCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a EventPrice.
     * @param {EventPriceDeleteArgs} args - Arguments to delete one EventPrice.
     * @example
     * // Delete one EventPrice
     * const EventPrice = await prisma.eventPrice.delete({
     *   where: {
     *     // ... filter to delete one EventPrice
     *   }
     * })
     * 
    **/
    delete<T extends EventPriceDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EventPriceDeleteArgs<ExtArgs>>
    ): Prisma__EventPriceClient<$Result.GetResult<Prisma.$EventPricePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one EventPrice.
     * @param {EventPriceUpdateArgs} args - Arguments to update one EventPrice.
     * @example
     * // Update one EventPrice
     * const eventPrice = await prisma.eventPrice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EventPriceUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EventPriceUpdateArgs<ExtArgs>>
    ): Prisma__EventPriceClient<$Result.GetResult<Prisma.$EventPricePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more EventPrices.
     * @param {EventPriceDeleteManyArgs} args - Arguments to filter EventPrices to delete.
     * @example
     * // Delete a few EventPrices
     * const { count } = await prisma.eventPrice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EventPriceDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventPriceDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventPrices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventPriceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EventPrices
     * const eventPrice = await prisma.eventPrice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EventPriceUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EventPriceUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EventPrice.
     * @param {EventPriceUpsertArgs} args - Arguments to update or create a EventPrice.
     * @example
     * // Update or create a EventPrice
     * const eventPrice = await prisma.eventPrice.upsert({
     *   create: {
     *     // ... data to create a EventPrice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EventPrice we want to update
     *   }
     * })
    **/
    upsert<T extends EventPriceUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EventPriceUpsertArgs<ExtArgs>>
    ): Prisma__EventPriceClient<$Result.GetResult<Prisma.$EventPricePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of EventPrices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventPriceCountArgs} args - Arguments to filter EventPrices to count.
     * @example
     * // Count the number of EventPrices
     * const count = await prisma.eventPrice.count({
     *   where: {
     *     // ... the filter for the EventPrices we want to count
     *   }
     * })
    **/
    count<T extends EventPriceCountArgs>(
      args?: Subset<T, EventPriceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventPriceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EventPrice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventPriceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventPriceAggregateArgs>(args: Subset<T, EventPriceAggregateArgs>): Prisma.PrismaPromise<GetEventPriceAggregateType<T>>

    /**
     * Group by EventPrice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventPriceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventPriceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventPriceGroupByArgs['orderBy'] }
        : { orderBy?: EventPriceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventPriceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventPriceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EventPrice model
   */
  readonly fields: EventPriceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EventPrice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventPriceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Event<T extends EventPrice$EventArgs<ExtArgs> = {}>(args?: Subset<T, EventPrice$EventArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the EventPrice model
   */ 
  interface EventPriceFieldRefs {
    readonly id: FieldRef<"EventPrice", 'Int'>
    readonly categoryEvent: FieldRef<"EventPrice", 'String'>
    readonly qty: FieldRef<"EventPrice", 'Int'>
    readonly price: FieldRef<"EventPrice", 'Float'>
    readonly updatedAt: FieldRef<"EventPrice", 'DateTime'>
    readonly createdAt: FieldRef<"EventPrice", 'DateTime'>
    readonly eventId: FieldRef<"EventPrice", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * EventPrice findUnique
   */
  export type EventPriceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventPrice
     */
    select?: EventPriceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventPriceInclude<ExtArgs> | null
    /**
     * Filter, which EventPrice to fetch.
     */
    where: EventPriceWhereUniqueInput
  }

  /**
   * EventPrice findUniqueOrThrow
   */
  export type EventPriceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventPrice
     */
    select?: EventPriceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventPriceInclude<ExtArgs> | null
    /**
     * Filter, which EventPrice to fetch.
     */
    where: EventPriceWhereUniqueInput
  }

  /**
   * EventPrice findFirst
   */
  export type EventPriceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventPrice
     */
    select?: EventPriceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventPriceInclude<ExtArgs> | null
    /**
     * Filter, which EventPrice to fetch.
     */
    where?: EventPriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventPrices to fetch.
     */
    orderBy?: EventPriceOrderByWithRelationInput | EventPriceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventPrices.
     */
    cursor?: EventPriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventPrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventPrices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventPrices.
     */
    distinct?: EventPriceScalarFieldEnum | EventPriceScalarFieldEnum[]
  }

  /**
   * EventPrice findFirstOrThrow
   */
  export type EventPriceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventPrice
     */
    select?: EventPriceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventPriceInclude<ExtArgs> | null
    /**
     * Filter, which EventPrice to fetch.
     */
    where?: EventPriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventPrices to fetch.
     */
    orderBy?: EventPriceOrderByWithRelationInput | EventPriceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventPrices.
     */
    cursor?: EventPriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventPrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventPrices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventPrices.
     */
    distinct?: EventPriceScalarFieldEnum | EventPriceScalarFieldEnum[]
  }

  /**
   * EventPrice findMany
   */
  export type EventPriceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventPrice
     */
    select?: EventPriceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventPriceInclude<ExtArgs> | null
    /**
     * Filter, which EventPrices to fetch.
     */
    where?: EventPriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventPrices to fetch.
     */
    orderBy?: EventPriceOrderByWithRelationInput | EventPriceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EventPrices.
     */
    cursor?: EventPriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventPrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventPrices.
     */
    skip?: number
    distinct?: EventPriceScalarFieldEnum | EventPriceScalarFieldEnum[]
  }

  /**
   * EventPrice create
   */
  export type EventPriceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventPrice
     */
    select?: EventPriceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventPriceInclude<ExtArgs> | null
    /**
     * The data needed to create a EventPrice.
     */
    data: XOR<EventPriceCreateInput, EventPriceUncheckedCreateInput>
  }

  /**
   * EventPrice createMany
   */
  export type EventPriceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EventPrices.
     */
    data: EventPriceCreateManyInput | EventPriceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EventPrice update
   */
  export type EventPriceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventPrice
     */
    select?: EventPriceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventPriceInclude<ExtArgs> | null
    /**
     * The data needed to update a EventPrice.
     */
    data: XOR<EventPriceUpdateInput, EventPriceUncheckedUpdateInput>
    /**
     * Choose, which EventPrice to update.
     */
    where: EventPriceWhereUniqueInput
  }

  /**
   * EventPrice updateMany
   */
  export type EventPriceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EventPrices.
     */
    data: XOR<EventPriceUpdateManyMutationInput, EventPriceUncheckedUpdateManyInput>
    /**
     * Filter which EventPrices to update
     */
    where?: EventPriceWhereInput
  }

  /**
   * EventPrice upsert
   */
  export type EventPriceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventPrice
     */
    select?: EventPriceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventPriceInclude<ExtArgs> | null
    /**
     * The filter to search for the EventPrice to update in case it exists.
     */
    where: EventPriceWhereUniqueInput
    /**
     * In case the EventPrice found by the `where` argument doesn't exist, create a new EventPrice with this data.
     */
    create: XOR<EventPriceCreateInput, EventPriceUncheckedCreateInput>
    /**
     * In case the EventPrice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventPriceUpdateInput, EventPriceUncheckedUpdateInput>
  }

  /**
   * EventPrice delete
   */
  export type EventPriceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventPrice
     */
    select?: EventPriceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventPriceInclude<ExtArgs> | null
    /**
     * Filter which EventPrice to delete.
     */
    where: EventPriceWhereUniqueInput
  }

  /**
   * EventPrice deleteMany
   */
  export type EventPriceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventPrices to delete
     */
    where?: EventPriceWhereInput
  }

  /**
   * EventPrice.Event
   */
  export type EventPrice$EventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
  }

  /**
   * EventPrice without action
   */
  export type EventPriceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventPrice
     */
    select?: EventPriceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventPriceInclude<ExtArgs> | null
  }


  /**
<<<<<<< Updated upstream
=======
   * Model Transaction
   */

  export type AggregateTransaction = {
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  export type TransactionAvgAggregateOutputType = {
    id: number | null
    buyerId: number | null
    eventId: number | null
    eventPriceId: number | null
    totalQty: number | null
    totalPrice: number | null
  }

  export type TransactionSumAggregateOutputType = {
    id: number | null
    buyerId: number | null
    eventId: number | null
    eventPriceId: number | null
    totalQty: number | null
    totalPrice: number | null
  }

  export type TransactionMinAggregateOutputType = {
    id: number | null
    buyerId: number | null
    eventId: number | null
    eventPriceId: number | null
    status: $Enums.StatusTransaction | null
    createdAt: Date | null
    totalQty: number | null
    totalPrice: number | null
  }

  export type TransactionMaxAggregateOutputType = {
    id: number | null
    buyerId: number | null
    eventId: number | null
    eventPriceId: number | null
    status: $Enums.StatusTransaction | null
    createdAt: Date | null
    totalQty: number | null
    totalPrice: number | null
  }

  export type TransactionCountAggregateOutputType = {
    id: number
    buyerId: number
    eventId: number
    eventPriceId: number
    status: number
    createdAt: number
    totalQty: number
    totalPrice: number
    _all: number
  }


  export type TransactionAvgAggregateInputType = {
    id?: true
    buyerId?: true
    eventId?: true
    eventPriceId?: true
    totalQty?: true
    totalPrice?: true
  }

  export type TransactionSumAggregateInputType = {
    id?: true
    buyerId?: true
    eventId?: true
    eventPriceId?: true
    totalQty?: true
    totalPrice?: true
  }

  export type TransactionMinAggregateInputType = {
    id?: true
    buyerId?: true
    eventId?: true
    eventPriceId?: true
    status?: true
    createdAt?: true
    totalQty?: true
    totalPrice?: true
  }

  export type TransactionMaxAggregateInputType = {
    id?: true
    buyerId?: true
    eventId?: true
    eventPriceId?: true
    status?: true
    createdAt?: true
    totalQty?: true
    totalPrice?: true
  }

  export type TransactionCountAggregateInputType = {
    id?: true
    buyerId?: true
    eventId?: true
    eventPriceId?: true
    status?: true
    createdAt?: true
    totalQty?: true
    totalPrice?: true
    _all?: true
  }

  export type TransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transaction to aggregate.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transactions
    **/
    _count?: true | TransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionMaxAggregateInputType
  }

  export type GetTransactionAggregateType<T extends TransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransaction[P]>
      : GetScalarType<T[P], AggregateTransaction[P]>
  }




  export type TransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithAggregationInput | TransactionOrderByWithAggregationInput[]
    by: TransactionScalarFieldEnum[] | TransactionScalarFieldEnum
    having?: TransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionCountAggregateInputType | true
    _avg?: TransactionAvgAggregateInputType
    _sum?: TransactionSumAggregateInputType
    _min?: TransactionMinAggregateInputType
    _max?: TransactionMaxAggregateInputType
  }

  export type TransactionGroupByOutputType = {
    id: number
    buyerId: number
    eventId: number
    eventPriceId: number
    status: $Enums.StatusTransaction
    createdAt: Date
    totalQty: number
    totalPrice: number
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  type GetTransactionGroupByPayload<T extends TransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionGroupByOutputType[P]>
        }
      >
    >


  export type TransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    buyerId?: boolean
    eventId?: boolean
    eventPriceId?: boolean
    status?: boolean
    createdAt?: boolean
    totalQty?: boolean
    totalPrice?: boolean
    buyer?: boolean | AccountDataDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
    eventPrice?: boolean | EventPriceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>


  export type TransactionSelectScalar = {
    id?: boolean
    buyerId?: boolean
    eventId?: boolean
    eventPriceId?: boolean
    status?: boolean
    createdAt?: boolean
    totalQty?: boolean
    totalPrice?: boolean
  }

  export type TransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    buyer?: boolean | AccountDataDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
    eventPrice?: boolean | EventPriceDefaultArgs<ExtArgs>
  }

  export type $TransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Transaction"
    objects: {
      buyer: Prisma.$AccountDataPayload<ExtArgs>
      event: Prisma.$EventPayload<ExtArgs>
      eventPrice: Prisma.$EventPricePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      buyerId: number
      eventId: number
      eventPriceId: number
      status: $Enums.StatusTransaction
      createdAt: Date
      totalQty: number
      totalPrice: number
    }, ExtArgs["result"]["transaction"]>
    composites: {}
  }

  type TransactionGetPayload<S extends boolean | null | undefined | TransactionDefaultArgs> = $Result.GetResult<Prisma.$TransactionPayload, S>

  type TransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TransactionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TransactionCountAggregateInputType | true
    }

  export interface TransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transaction'], meta: { name: 'Transaction' } }
    /**
     * Find zero or one Transaction that matches the filter.
     * @param {TransactionFindUniqueArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TransactionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionFindUniqueArgs<ExtArgs>>
    ): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Transaction that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TransactionFindUniqueOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TransactionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Transaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TransactionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionFindFirstArgs<ExtArgs>>
    ): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Transaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TransactionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transaction.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionWithIdOnly = await prisma.transaction.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TransactionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Transaction.
     * @param {TransactionCreateArgs} args - Arguments to create a Transaction.
     * @example
     * // Create one Transaction
     * const Transaction = await prisma.transaction.create({
     *   data: {
     *     // ... data to create a Transaction
     *   }
     * })
     * 
    **/
    create<T extends TransactionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionCreateArgs<ExtArgs>>
    ): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Transactions.
     * @param {TransactionCreateManyArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends TransactionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Transaction.
     * @param {TransactionDeleteArgs} args - Arguments to delete one Transaction.
     * @example
     * // Delete one Transaction
     * const Transaction = await prisma.transaction.delete({
     *   where: {
     *     // ... filter to delete one Transaction
     *   }
     * })
     * 
    **/
    delete<T extends TransactionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionDeleteArgs<ExtArgs>>
    ): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Transaction.
     * @param {TransactionUpdateArgs} args - Arguments to update one Transaction.
     * @example
     * // Update one Transaction
     * const transaction = await prisma.transaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TransactionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionUpdateArgs<ExtArgs>>
    ): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Transactions.
     * @param {TransactionDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TransactionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TransactionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Transaction.
     * @param {TransactionUpsertArgs} args - Arguments to update or create a Transaction.
     * @example
     * // Update or create a Transaction
     * const transaction = await prisma.transaction.upsert({
     *   create: {
     *     // ... data to create a Transaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transaction we want to update
     *   }
     * })
    **/
    upsert<T extends TransactionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionUpsertArgs<ExtArgs>>
    ): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transaction.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends TransactionCountArgs>(
      args?: Subset<T, TransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionAggregateArgs>(args: Subset<T, TransactionAggregateArgs>): Prisma.PrismaPromise<GetTransactionAggregateType<T>>

    /**
     * Group by Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionGroupByArgs['orderBy'] }
        : { orderBy?: TransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transaction model
   */
  readonly fields: TransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    buyer<T extends AccountDataDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountDataDefaultArgs<ExtArgs>>): Prisma__AccountDataClient<$Result.GetResult<Prisma.$AccountDataPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    eventPrice<T extends EventPriceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventPriceDefaultArgs<ExtArgs>>): Prisma__EventPriceClient<$Result.GetResult<Prisma.$EventPricePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Transaction model
   */ 
  interface TransactionFieldRefs {
    readonly id: FieldRef<"Transaction", 'Int'>
    readonly buyerId: FieldRef<"Transaction", 'Int'>
    readonly eventId: FieldRef<"Transaction", 'Int'>
    readonly eventPriceId: FieldRef<"Transaction", 'Int'>
    readonly status: FieldRef<"Transaction", 'StatusTransaction'>
    readonly createdAt: FieldRef<"Transaction", 'DateTime'>
    readonly totalQty: FieldRef<"Transaction", 'Int'>
    readonly totalPrice: FieldRef<"Transaction", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Transaction findUnique
   */
  export type TransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findUniqueOrThrow
   */
  export type TransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findFirst
   */
  export type TransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findFirstOrThrow
   */
  export type TransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findMany
   */
  export type TransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transactions to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction create
   */
  export type TransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a Transaction.
     */
    data: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
  }

  /**
   * Transaction createMany
   */
  export type TransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Transaction update
   */
  export type TransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a Transaction.
     */
    data: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
    /**
     * Choose, which Transaction to update.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction updateMany
   */
  export type TransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionWhereInput
  }

  /**
   * Transaction upsert
   */
  export type TransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the Transaction to update in case it exists.
     */
    where: TransactionWhereUniqueInput
    /**
     * In case the Transaction found by the `where` argument doesn't exist, create a new Transaction with this data.
     */
    create: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
    /**
     * In case the Transaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
  }

  /**
   * Transaction delete
   */
  export type TransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter which Transaction to delete.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction deleteMany
   */
  export type TransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transactions to delete
     */
    where?: TransactionWhereInput
  }

  /**
   * Transaction without action
   */
  export type TransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
  }


  /**
>>>>>>> Stashed changes
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AccountDataScalarFieldEnum: {
    id: 'id',
    fullName: 'fullName',
    email: 'email',
    password: 'password',
    is_verified: 'is_verified',
    type: 'type',
    noPhone: 'noPhone',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt'
  };

  export type AccountDataScalarFieldEnum = (typeof AccountDataScalarFieldEnum)[keyof typeof AccountDataScalarFieldEnum]


  export const UserDetailScalarFieldEnum: {
    id: 'id',
    promoId: 'promoId',
    point: 'point',
    referalCode: 'referalCode',
    yourReferalCode: 'yourReferalCode',
    expReferalCode: 'expReferalCode'
  };

  export type UserDetailScalarFieldEnum = (typeof UserDetailScalarFieldEnum)[keyof typeof UserDetailScalarFieldEnum]


  export const EventScalarFieldEnum: {
    id: 'id',
    adminId: 'adminId',
    title: 'title',
    status: 'status',
    category: 'category',
    location: 'location',
    imgEvent: 'imgEvent',
    imgSeat: 'imgSeat',
    date: 'date',
    startTime: 'startTime',
    finishTime: 'finishTime',
    city: 'city',
    desc: 'desc',
    promo: 'promo',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt'
  };

  export type EventScalarFieldEnum = (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]


  export const EventPriceScalarFieldEnum: {
    id: 'id',
    categoryEvent: 'categoryEvent',
    qty: 'qty',
    price: 'price',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt',
    eventId: 'eventId'
  };

  export type EventPriceScalarFieldEnum = (typeof EventPriceScalarFieldEnum)[keyof typeof EventPriceScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Type'
   */
  export type EnumTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Type'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Status'
   */
  export type EnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status'>
    


  /**
   * Reference to a field of type 'Category'
   */
  export type EnumCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Category'>
    


  /**
   * Reference to a field of type 'Bytes'
   */
  export type BytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes'>
    


  /**
   * Reference to a field of type 'City'
   */
  export type EnumCityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'City'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type AccountDataWhereInput = {
    AND?: AccountDataWhereInput | AccountDataWhereInput[]
    OR?: AccountDataWhereInput[]
    NOT?: AccountDataWhereInput | AccountDataWhereInput[]
    id?: IntFilter<"AccountData"> | number
    fullName?: StringFilter<"AccountData"> | string
    email?: StringFilter<"AccountData"> | string
    password?: StringFilter<"AccountData"> | string
    is_verified?: BoolFilter<"AccountData"> | boolean
    type?: EnumTypeFilter<"AccountData"> | $Enums.Type
    noPhone?: StringFilter<"AccountData"> | string
    updatedAt?: DateTimeFilter<"AccountData"> | Date | string
    createdAt?: DateTimeFilter<"AccountData"> | Date | string
    userData?: XOR<UserDetailRelationFilter, UserDetailWhereInput>
    Event?: EventListRelationFilter
  }

  export type AccountDataOrderByWithRelationInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    is_verified?: SortOrder
    type?: SortOrder
    noPhone?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    userData?: UserDetailOrderByWithRelationInput
    Event?: EventOrderByRelationAggregateInput
  }

  export type AccountDataWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: AccountDataWhereInput | AccountDataWhereInput[]
    OR?: AccountDataWhereInput[]
    NOT?: AccountDataWhereInput | AccountDataWhereInput[]
    fullName?: StringFilter<"AccountData"> | string
    password?: StringFilter<"AccountData"> | string
    is_verified?: BoolFilter<"AccountData"> | boolean
    type?: EnumTypeFilter<"AccountData"> | $Enums.Type
    noPhone?: StringFilter<"AccountData"> | string
    updatedAt?: DateTimeFilter<"AccountData"> | Date | string
    createdAt?: DateTimeFilter<"AccountData"> | Date | string
    userData?: XOR<UserDetailRelationFilter, UserDetailWhereInput>
    Event?: EventListRelationFilter
  }, "id" | "email">

  export type AccountDataOrderByWithAggregationInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    is_verified?: SortOrder
    type?: SortOrder
    noPhone?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    _count?: AccountDataCountOrderByAggregateInput
    _avg?: AccountDataAvgOrderByAggregateInput
    _max?: AccountDataMaxOrderByAggregateInput
    _min?: AccountDataMinOrderByAggregateInput
    _sum?: AccountDataSumOrderByAggregateInput
  }

  export type AccountDataScalarWhereWithAggregatesInput = {
    AND?: AccountDataScalarWhereWithAggregatesInput | AccountDataScalarWhereWithAggregatesInput[]
    OR?: AccountDataScalarWhereWithAggregatesInput[]
    NOT?: AccountDataScalarWhereWithAggregatesInput | AccountDataScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AccountData"> | number
    fullName?: StringWithAggregatesFilter<"AccountData"> | string
    email?: StringWithAggregatesFilter<"AccountData"> | string
    password?: StringWithAggregatesFilter<"AccountData"> | string
    is_verified?: BoolWithAggregatesFilter<"AccountData"> | boolean
    type?: EnumTypeWithAggregatesFilter<"AccountData"> | $Enums.Type
    noPhone?: StringWithAggregatesFilter<"AccountData"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"AccountData"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"AccountData"> | Date | string
  }

  export type UserDetailWhereInput = {
    AND?: UserDetailWhereInput | UserDetailWhereInput[]
    OR?: UserDetailWhereInput[]
    NOT?: UserDetailWhereInput | UserDetailWhereInput[]
    id?: IntFilter<"UserDetail"> | number
    promoId?: IntNullableFilter<"UserDetail"> | number | null
    point?: IntFilter<"UserDetail"> | number
    referalCode?: StringNullableFilter<"UserDetail"> | string | null
    yourReferalCode?: StringNullableFilter<"UserDetail"> | string | null
    expReferalCode?: DateTimeNullableFilter<"UserDetail"> | Date | string | null
    AccountData?: XOR<AccountDataNullableRelationFilter, AccountDataWhereInput> | null
  }

  export type UserDetailOrderByWithRelationInput = {
    id?: SortOrder
    promoId?: SortOrderInput | SortOrder
    point?: SortOrder
    referalCode?: SortOrderInput | SortOrder
    yourReferalCode?: SortOrderInput | SortOrder
    expReferalCode?: SortOrderInput | SortOrder
    AccountData?: AccountDataOrderByWithRelationInput
  }

  export type UserDetailWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    yourReferalCode?: string
    AND?: UserDetailWhereInput | UserDetailWhereInput[]
    OR?: UserDetailWhereInput[]
    NOT?: UserDetailWhereInput | UserDetailWhereInput[]
    promoId?: IntNullableFilter<"UserDetail"> | number | null
    point?: IntFilter<"UserDetail"> | number
    referalCode?: StringNullableFilter<"UserDetail"> | string | null
    expReferalCode?: DateTimeNullableFilter<"UserDetail"> | Date | string | null
    AccountData?: XOR<AccountDataNullableRelationFilter, AccountDataWhereInput> | null
  }, "id" | "yourReferalCode">

  export type UserDetailOrderByWithAggregationInput = {
    id?: SortOrder
    promoId?: SortOrderInput | SortOrder
    point?: SortOrder
    referalCode?: SortOrderInput | SortOrder
    yourReferalCode?: SortOrderInput | SortOrder
    expReferalCode?: SortOrderInput | SortOrder
    _count?: UserDetailCountOrderByAggregateInput
    _avg?: UserDetailAvgOrderByAggregateInput
    _max?: UserDetailMaxOrderByAggregateInput
    _min?: UserDetailMinOrderByAggregateInput
    _sum?: UserDetailSumOrderByAggregateInput
  }

  export type UserDetailScalarWhereWithAggregatesInput = {
    AND?: UserDetailScalarWhereWithAggregatesInput | UserDetailScalarWhereWithAggregatesInput[]
    OR?: UserDetailScalarWhereWithAggregatesInput[]
    NOT?: UserDetailScalarWhereWithAggregatesInput | UserDetailScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserDetail"> | number
    promoId?: IntNullableWithAggregatesFilter<"UserDetail"> | number | null
    point?: IntWithAggregatesFilter<"UserDetail"> | number
    referalCode?: StringNullableWithAggregatesFilter<"UserDetail"> | string | null
    yourReferalCode?: StringNullableWithAggregatesFilter<"UserDetail"> | string | null
    expReferalCode?: DateTimeNullableWithAggregatesFilter<"UserDetail"> | Date | string | null
  }

  export type EventWhereInput = {
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    id?: IntFilter<"Event"> | number
    adminId?: IntFilter<"Event"> | number
    title?: StringFilter<"Event"> | string
    status?: EnumStatusFilter<"Event"> | $Enums.Status
    category?: EnumCategoryFilter<"Event"> | $Enums.Category
    location?: StringFilter<"Event"> | string
    imgEvent?: BytesNullableFilter<"Event"> | Buffer | null
    imgSeat?: BytesNullableFilter<"Event"> | Buffer | null
    date?: StringFilter<"Event"> | string
    startTime?: StringFilter<"Event"> | string
    finishTime?: StringFilter<"Event"> | string
    city?: EnumCityFilter<"Event"> | $Enums.City
    desc?: StringFilter<"Event"> | string
    promo?: FloatNullableFilter<"Event"> | number | null
    updatedAt?: DateTimeFilter<"Event"> | Date | string
    createdAt?: DateTimeFilter<"Event"> | Date | string
    admin?: XOR<AccountDataRelationFilter, AccountDataWhereInput>
    EventPrice?: EventPriceListRelationFilter
  }

  export type EventOrderByWithRelationInput = {
    id?: SortOrder
    adminId?: SortOrder
    title?: SortOrder
    status?: SortOrder
    category?: SortOrder
    location?: SortOrder
    imgEvent?: SortOrderInput | SortOrder
    imgSeat?: SortOrderInput | SortOrder
    date?: SortOrder
    startTime?: SortOrder
    finishTime?: SortOrder
    city?: SortOrder
    desc?: SortOrder
    promo?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    admin?: AccountDataOrderByWithRelationInput
    EventPrice?: EventPriceOrderByRelationAggregateInput
  }

  export type EventWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    title?: string
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    adminId?: IntFilter<"Event"> | number
    status?: EnumStatusFilter<"Event"> | $Enums.Status
    category?: EnumCategoryFilter<"Event"> | $Enums.Category
    location?: StringFilter<"Event"> | string
    imgEvent?: BytesNullableFilter<"Event"> | Buffer | null
    imgSeat?: BytesNullableFilter<"Event"> | Buffer | null
    date?: StringFilter<"Event"> | string
    startTime?: StringFilter<"Event"> | string
    finishTime?: StringFilter<"Event"> | string
    city?: EnumCityFilter<"Event"> | $Enums.City
    desc?: StringFilter<"Event"> | string
    promo?: FloatNullableFilter<"Event"> | number | null
    updatedAt?: DateTimeFilter<"Event"> | Date | string
    createdAt?: DateTimeFilter<"Event"> | Date | string
    admin?: XOR<AccountDataRelationFilter, AccountDataWhereInput>
    EventPrice?: EventPriceListRelationFilter
  }, "id" | "title">

  export type EventOrderByWithAggregationInput = {
    id?: SortOrder
    adminId?: SortOrder
    title?: SortOrder
    status?: SortOrder
    category?: SortOrder
    location?: SortOrder
    imgEvent?: SortOrderInput | SortOrder
    imgSeat?: SortOrderInput | SortOrder
    date?: SortOrder
    startTime?: SortOrder
    finishTime?: SortOrder
    city?: SortOrder
    desc?: SortOrder
    promo?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    _count?: EventCountOrderByAggregateInput
    _avg?: EventAvgOrderByAggregateInput
    _max?: EventMaxOrderByAggregateInput
    _min?: EventMinOrderByAggregateInput
    _sum?: EventSumOrderByAggregateInput
  }

  export type EventScalarWhereWithAggregatesInput = {
    AND?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    OR?: EventScalarWhereWithAggregatesInput[]
    NOT?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Event"> | number
    adminId?: IntWithAggregatesFilter<"Event"> | number
    title?: StringWithAggregatesFilter<"Event"> | string
    status?: EnumStatusWithAggregatesFilter<"Event"> | $Enums.Status
    category?: EnumCategoryWithAggregatesFilter<"Event"> | $Enums.Category
    location?: StringWithAggregatesFilter<"Event"> | string
    imgEvent?: BytesNullableWithAggregatesFilter<"Event"> | Buffer | null
    imgSeat?: BytesNullableWithAggregatesFilter<"Event"> | Buffer | null
    date?: StringWithAggregatesFilter<"Event"> | string
    startTime?: StringWithAggregatesFilter<"Event"> | string
    finishTime?: StringWithAggregatesFilter<"Event"> | string
    city?: EnumCityWithAggregatesFilter<"Event"> | $Enums.City
    desc?: StringWithAggregatesFilter<"Event"> | string
    promo?: FloatNullableWithAggregatesFilter<"Event"> | number | null
    updatedAt?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Event"> | Date | string
  }

  export type EventPriceWhereInput = {
    AND?: EventPriceWhereInput | EventPriceWhereInput[]
    OR?: EventPriceWhereInput[]
    NOT?: EventPriceWhereInput | EventPriceWhereInput[]
    id?: IntFilter<"EventPrice"> | number
    categoryEvent?: StringNullableFilter<"EventPrice"> | string | null
    qty?: IntFilter<"EventPrice"> | number
    price?: FloatFilter<"EventPrice"> | number
    updatedAt?: DateTimeFilter<"EventPrice"> | Date | string
    createdAt?: DateTimeFilter<"EventPrice"> | Date | string
    eventId?: IntNullableFilter<"EventPrice"> | number | null
    Event?: XOR<EventNullableRelationFilter, EventWhereInput> | null
  }

  export type EventPriceOrderByWithRelationInput = {
    id?: SortOrder
    categoryEvent?: SortOrderInput | SortOrder
    qty?: SortOrder
    price?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    eventId?: SortOrderInput | SortOrder
    Event?: EventOrderByWithRelationInput
  }

  export type EventPriceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EventPriceWhereInput | EventPriceWhereInput[]
    OR?: EventPriceWhereInput[]
    NOT?: EventPriceWhereInput | EventPriceWhereInput[]
    categoryEvent?: StringNullableFilter<"EventPrice"> | string | null
    qty?: IntFilter<"EventPrice"> | number
    price?: FloatFilter<"EventPrice"> | number
    updatedAt?: DateTimeFilter<"EventPrice"> | Date | string
    createdAt?: DateTimeFilter<"EventPrice"> | Date | string
    eventId?: IntNullableFilter<"EventPrice"> | number | null
    Event?: XOR<EventNullableRelationFilter, EventWhereInput> | null
<<<<<<< Updated upstream
  }, "id" | "categoryEvent">
=======
    Transaction?: TransactionListRelationFilter
  }, "id">
>>>>>>> Stashed changes

  export type EventPriceOrderByWithAggregationInput = {
    id?: SortOrder
    categoryEvent?: SortOrderInput | SortOrder
    qty?: SortOrder
    price?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    eventId?: SortOrderInput | SortOrder
    _count?: EventPriceCountOrderByAggregateInput
    _avg?: EventPriceAvgOrderByAggregateInput
    _max?: EventPriceMaxOrderByAggregateInput
    _min?: EventPriceMinOrderByAggregateInput
    _sum?: EventPriceSumOrderByAggregateInput
  }

  export type EventPriceScalarWhereWithAggregatesInput = {
    AND?: EventPriceScalarWhereWithAggregatesInput | EventPriceScalarWhereWithAggregatesInput[]
    OR?: EventPriceScalarWhereWithAggregatesInput[]
    NOT?: EventPriceScalarWhereWithAggregatesInput | EventPriceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"EventPrice"> | number
    categoryEvent?: StringNullableWithAggregatesFilter<"EventPrice"> | string | null
    qty?: IntWithAggregatesFilter<"EventPrice"> | number
    price?: FloatWithAggregatesFilter<"EventPrice"> | number
    updatedAt?: DateTimeWithAggregatesFilter<"EventPrice"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"EventPrice"> | Date | string
    eventId?: IntNullableWithAggregatesFilter<"EventPrice"> | number | null
  }

  export type AccountDataCreateInput = {
    fullName: string
    email: string
    password: string
    is_verified?: boolean
    type: $Enums.Type
    noPhone: string
    updatedAt?: Date | string
    createdAt?: Date | string
    userData?: UserDetailCreateNestedOneWithoutAccountDataInput
    Event?: EventCreateNestedManyWithoutAdminInput
  }

  export type AccountDataUncheckedCreateInput = {
    id?: number
    fullName: string
    email: string
    password: string
    is_verified?: boolean
    type: $Enums.Type
    noPhone: string
    updatedAt?: Date | string
    createdAt?: Date | string
    Event?: EventUncheckedCreateNestedManyWithoutAdminInput
  }

  export type AccountDataUpdateInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    noPhone?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userData?: UserDetailUpdateOneRequiredWithoutAccountDataNestedInput
    Event?: EventUpdateManyWithoutAdminNestedInput
  }

  export type AccountDataUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    noPhone?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Event?: EventUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type AccountDataCreateManyInput = {
    id?: number
    fullName: string
    email: string
    password: string
    is_verified?: boolean
    type: $Enums.Type
    noPhone: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type AccountDataUpdateManyMutationInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    noPhone?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountDataUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    noPhone?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserDetailCreateInput = {
    promoId?: number | null
    point?: number
    referalCode?: string | null
    yourReferalCode?: string | null
    expReferalCode?: Date | string | null
    AccountData?: AccountDataCreateNestedOneWithoutUserDataInput
  }

  export type UserDetailUncheckedCreateInput = {
    id?: number
    promoId?: number | null
    point?: number
    referalCode?: string | null
    yourReferalCode?: string | null
    expReferalCode?: Date | string | null
    AccountData?: AccountDataUncheckedCreateNestedOneWithoutUserDataInput
  }

  export type UserDetailUpdateInput = {
    promoId?: NullableIntFieldUpdateOperationsInput | number | null
    point?: IntFieldUpdateOperationsInput | number
    referalCode?: NullableStringFieldUpdateOperationsInput | string | null
    yourReferalCode?: NullableStringFieldUpdateOperationsInput | string | null
    expReferalCode?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    AccountData?: AccountDataUpdateOneWithoutUserDataNestedInput
  }

  export type UserDetailUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    promoId?: NullableIntFieldUpdateOperationsInput | number | null
    point?: IntFieldUpdateOperationsInput | number
    referalCode?: NullableStringFieldUpdateOperationsInput | string | null
    yourReferalCode?: NullableStringFieldUpdateOperationsInput | string | null
    expReferalCode?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    AccountData?: AccountDataUncheckedUpdateOneWithoutUserDataNestedInput
  }

  export type UserDetailCreateManyInput = {
    id?: number
    promoId?: number | null
    point?: number
    referalCode?: string | null
    yourReferalCode?: string | null
    expReferalCode?: Date | string | null
  }

  export type UserDetailUpdateManyMutationInput = {
    promoId?: NullableIntFieldUpdateOperationsInput | number | null
    point?: IntFieldUpdateOperationsInput | number
    referalCode?: NullableStringFieldUpdateOperationsInput | string | null
    yourReferalCode?: NullableStringFieldUpdateOperationsInput | string | null
    expReferalCode?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserDetailUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    promoId?: NullableIntFieldUpdateOperationsInput | number | null
    point?: IntFieldUpdateOperationsInput | number
    referalCode?: NullableStringFieldUpdateOperationsInput | string | null
    yourReferalCode?: NullableStringFieldUpdateOperationsInput | string | null
    expReferalCode?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EventCreateInput = {
    title: string
    status: $Enums.Status
    category: $Enums.Category
    location: string
    imgEvent?: Buffer | null
    imgSeat?: Buffer | null
    date: string
    startTime: string
    finishTime: string
    city: $Enums.City
    desc: string
    promo?: number | null
    updatedAt?: Date | string
    createdAt?: Date | string
    admin: AccountDataCreateNestedOneWithoutEventInput
    EventPrice?: EventPriceCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateInput = {
    id?: number
    adminId: number
    title: string
    status: $Enums.Status
    category: $Enums.Category
    location: string
    imgEvent?: Buffer | null
    imgSeat?: Buffer | null
    date: string
    startTime: string
    finishTime: string
    city: $Enums.City
    desc: string
    promo?: number | null
    updatedAt?: Date | string
    createdAt?: Date | string
    EventPrice?: EventPriceUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    location?: StringFieldUpdateOperationsInput | string
    imgEvent?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    imgSeat?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    date?: StringFieldUpdateOperationsInput | string
    startTime?: StringFieldUpdateOperationsInput | string
    finishTime?: StringFieldUpdateOperationsInput | string
    city?: EnumCityFieldUpdateOperationsInput | $Enums.City
    desc?: StringFieldUpdateOperationsInput | string
    promo?: NullableFloatFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: AccountDataUpdateOneRequiredWithoutEventNestedInput
    EventPrice?: EventPriceUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    adminId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    location?: StringFieldUpdateOperationsInput | string
    imgEvent?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    imgSeat?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    date?: StringFieldUpdateOperationsInput | string
    startTime?: StringFieldUpdateOperationsInput | string
    finishTime?: StringFieldUpdateOperationsInput | string
    city?: EnumCityFieldUpdateOperationsInput | $Enums.City
    desc?: StringFieldUpdateOperationsInput | string
    promo?: NullableFloatFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    EventPrice?: EventPriceUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventCreateManyInput = {
    id?: number
    adminId: number
    title: string
    status: $Enums.Status
    category: $Enums.Category
    location: string
    imgEvent?: Buffer | null
    imgSeat?: Buffer | null
    date: string
    startTime: string
    finishTime: string
    city: $Enums.City
    desc: string
    promo?: number | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type EventUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    location?: StringFieldUpdateOperationsInput | string
    imgEvent?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    imgSeat?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    date?: StringFieldUpdateOperationsInput | string
    startTime?: StringFieldUpdateOperationsInput | string
    finishTime?: StringFieldUpdateOperationsInput | string
    city?: EnumCityFieldUpdateOperationsInput | $Enums.City
    desc?: StringFieldUpdateOperationsInput | string
    promo?: NullableFloatFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    adminId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    location?: StringFieldUpdateOperationsInput | string
    imgEvent?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    imgSeat?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    date?: StringFieldUpdateOperationsInput | string
    startTime?: StringFieldUpdateOperationsInput | string
    finishTime?: StringFieldUpdateOperationsInput | string
    city?: EnumCityFieldUpdateOperationsInput | $Enums.City
    desc?: StringFieldUpdateOperationsInput | string
    promo?: NullableFloatFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventPriceCreateInput = {
    categoryEvent?: string | null
    qty: number
    price: number
    updatedAt?: Date | string
    createdAt?: Date | string
    Event?: EventCreateNestedOneWithoutEventPriceInput
  }

  export type EventPriceUncheckedCreateInput = {
    id?: number
    categoryEvent?: string | null
    qty: number
    price: number
    updatedAt?: Date | string
    createdAt?: Date | string
    eventId?: number | null
  }

  export type EventPriceUpdateInput = {
    categoryEvent?: NullableStringFieldUpdateOperationsInput | string | null
    qty?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Event?: EventUpdateOneWithoutEventPriceNestedInput
  }

  export type EventPriceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryEvent?: NullableStringFieldUpdateOperationsInput | string | null
    qty?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eventId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type EventPriceCreateManyInput = {
    id?: number
    categoryEvent?: string | null
    qty: number
    price: number
    updatedAt?: Date | string
    createdAt?: Date | string
    eventId?: number | null
  }

  export type EventPriceUpdateManyMutationInput = {
    categoryEvent?: NullableStringFieldUpdateOperationsInput | string | null
    qty?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventPriceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryEvent?: NullableStringFieldUpdateOperationsInput | string | null
    qty?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eventId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.Type | EnumTypeFieldRefInput<$PrismaModel>
    in?: $Enums.Type[]
    notIn?: $Enums.Type[]
    not?: NestedEnumTypeFilter<$PrismaModel> | $Enums.Type
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserDetailRelationFilter = {
    is?: UserDetailWhereInput
    isNot?: UserDetailWhereInput
  }

  export type EventListRelationFilter = {
    every?: EventWhereInput
    some?: EventWhereInput
    none?: EventWhereInput
  }

  export type EventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountDataCountOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    is_verified?: SortOrder
    type?: SortOrder
    noPhone?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type AccountDataAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AccountDataMaxOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    is_verified?: SortOrder
    type?: SortOrder
    noPhone?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type AccountDataMinOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    is_verified?: SortOrder
    type?: SortOrder
    noPhone?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type AccountDataSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Type | EnumTypeFieldRefInput<$PrismaModel>
    in?: $Enums.Type[]
    notIn?: $Enums.Type[]
    not?: NestedEnumTypeWithAggregatesFilter<$PrismaModel> | $Enums.Type
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTypeFilter<$PrismaModel>
    _max?: NestedEnumTypeFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type AccountDataNullableRelationFilter = {
    is?: AccountDataWhereInput | null
    isNot?: AccountDataWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserDetailCountOrderByAggregateInput = {
    id?: SortOrder
    promoId?: SortOrder
    point?: SortOrder
    referalCode?: SortOrder
    yourReferalCode?: SortOrder
    expReferalCode?: SortOrder
  }

  export type UserDetailAvgOrderByAggregateInput = {
    id?: SortOrder
    promoId?: SortOrder
    point?: SortOrder
  }

  export type UserDetailMaxOrderByAggregateInput = {
    id?: SortOrder
    promoId?: SortOrder
    point?: SortOrder
    referalCode?: SortOrder
    yourReferalCode?: SortOrder
    expReferalCode?: SortOrder
  }

  export type UserDetailMinOrderByAggregateInput = {
    id?: SortOrder
    promoId?: SortOrder
    point?: SortOrder
    referalCode?: SortOrder
    yourReferalCode?: SortOrder
    expReferalCode?: SortOrder
  }

  export type UserDetailSumOrderByAggregateInput = {
    id?: SortOrder
    promoId?: SortOrder
    point?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[]
    notIn?: $Enums.Status[]
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type EnumCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.Category | EnumCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.Category[]
    notIn?: $Enums.Category[]
    not?: NestedEnumCategoryFilter<$PrismaModel> | $Enums.Category
  }

  export type BytesNullableFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel> | null
    in?: Buffer[] | null
    notIn?: Buffer[] | null
    not?: NestedBytesNullableFilter<$PrismaModel> | Buffer | null
  }

  export type EnumCityFilter<$PrismaModel = never> = {
    equals?: $Enums.City | EnumCityFieldRefInput<$PrismaModel>
    in?: $Enums.City[]
    notIn?: $Enums.City[]
    not?: NestedEnumCityFilter<$PrismaModel> | $Enums.City
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type AccountDataRelationFilter = {
    is?: AccountDataWhereInput
    isNot?: AccountDataWhereInput
  }

  export type EventPriceListRelationFilter = {
    every?: EventPriceWhereInput
    some?: EventPriceWhereInput
    none?: EventPriceWhereInput
  }

  export type EventPriceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventCountOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
    title?: SortOrder
    status?: SortOrder
    category?: SortOrder
    location?: SortOrder
    imgEvent?: SortOrder
    imgSeat?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    finishTime?: SortOrder
    city?: SortOrder
    desc?: SortOrder
    promo?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type EventAvgOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
    promo?: SortOrder
  }

  export type EventMaxOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
    title?: SortOrder
    status?: SortOrder
    category?: SortOrder
    location?: SortOrder
    imgEvent?: SortOrder
    imgSeat?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    finishTime?: SortOrder
    city?: SortOrder
    desc?: SortOrder
    promo?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type EventMinOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
    title?: SortOrder
    status?: SortOrder
    category?: SortOrder
    location?: SortOrder
    imgEvent?: SortOrder
    imgSeat?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    finishTime?: SortOrder
    city?: SortOrder
    desc?: SortOrder
    promo?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type EventSumOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
    promo?: SortOrder
  }

  export type EnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[]
    notIn?: $Enums.Status[]
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type EnumCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Category | EnumCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.Category[]
    notIn?: $Enums.Category[]
    not?: NestedEnumCategoryWithAggregatesFilter<$PrismaModel> | $Enums.Category
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCategoryFilter<$PrismaModel>
    _max?: NestedEnumCategoryFilter<$PrismaModel>
  }

  export type BytesNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel> | null
    in?: Buffer[] | null
    notIn?: Buffer[] | null
    not?: NestedBytesNullableWithAggregatesFilter<$PrismaModel> | Buffer | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBytesNullableFilter<$PrismaModel>
    _max?: NestedBytesNullableFilter<$PrismaModel>
  }

  export type EnumCityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.City | EnumCityFieldRefInput<$PrismaModel>
    in?: $Enums.City[]
    notIn?: $Enums.City[]
    not?: NestedEnumCityWithAggregatesFilter<$PrismaModel> | $Enums.City
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCityFilter<$PrismaModel>
    _max?: NestedEnumCityFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type EventNullableRelationFilter = {
    is?: EventWhereInput | null
    isNot?: EventWhereInput | null
  }

  export type EventPriceCountOrderByAggregateInput = {
    id?: SortOrder
    categoryEvent?: SortOrder
    qty?: SortOrder
    price?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    eventId?: SortOrder
  }

  export type EventPriceAvgOrderByAggregateInput = {
    id?: SortOrder
    qty?: SortOrder
    price?: SortOrder
    eventId?: SortOrder
  }

  export type EventPriceMaxOrderByAggregateInput = {
    id?: SortOrder
    categoryEvent?: SortOrder
    qty?: SortOrder
    price?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    eventId?: SortOrder
  }

  export type EventPriceMinOrderByAggregateInput = {
    id?: SortOrder
    categoryEvent?: SortOrder
    qty?: SortOrder
    price?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    eventId?: SortOrder
  }

  export type EventPriceSumOrderByAggregateInput = {
    id?: SortOrder
    qty?: SortOrder
    price?: SortOrder
    eventId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type UserDetailCreateNestedOneWithoutAccountDataInput = {
    create?: XOR<UserDetailCreateWithoutAccountDataInput, UserDetailUncheckedCreateWithoutAccountDataInput>
    connectOrCreate?: UserDetailCreateOrConnectWithoutAccountDataInput
    connect?: UserDetailWhereUniqueInput
  }

  export type EventCreateNestedManyWithoutAdminInput = {
    create?: XOR<EventCreateWithoutAdminInput, EventUncheckedCreateWithoutAdminInput> | EventCreateWithoutAdminInput[] | EventUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: EventCreateOrConnectWithoutAdminInput | EventCreateOrConnectWithoutAdminInput[]
    createMany?: EventCreateManyAdminInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutAdminInput = {
    create?: XOR<EventCreateWithoutAdminInput, EventUncheckedCreateWithoutAdminInput> | EventCreateWithoutAdminInput[] | EventUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: EventCreateOrConnectWithoutAdminInput | EventCreateOrConnectWithoutAdminInput[]
    createMany?: EventCreateManyAdminInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumTypeFieldUpdateOperationsInput = {
    set?: $Enums.Type
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserDetailUpdateOneRequiredWithoutAccountDataNestedInput = {
    create?: XOR<UserDetailCreateWithoutAccountDataInput, UserDetailUncheckedCreateWithoutAccountDataInput>
    connectOrCreate?: UserDetailCreateOrConnectWithoutAccountDataInput
    upsert?: UserDetailUpsertWithoutAccountDataInput
    connect?: UserDetailWhereUniqueInput
    update?: XOR<XOR<UserDetailUpdateToOneWithWhereWithoutAccountDataInput, UserDetailUpdateWithoutAccountDataInput>, UserDetailUncheckedUpdateWithoutAccountDataInput>
  }

  export type EventUpdateManyWithoutAdminNestedInput = {
    create?: XOR<EventCreateWithoutAdminInput, EventUncheckedCreateWithoutAdminInput> | EventCreateWithoutAdminInput[] | EventUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: EventCreateOrConnectWithoutAdminInput | EventCreateOrConnectWithoutAdminInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutAdminInput | EventUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: EventCreateManyAdminInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutAdminInput | EventUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: EventUpdateManyWithWhereWithoutAdminInput | EventUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EventUncheckedUpdateManyWithoutAdminNestedInput = {
    create?: XOR<EventCreateWithoutAdminInput, EventUncheckedCreateWithoutAdminInput> | EventCreateWithoutAdminInput[] | EventUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: EventCreateOrConnectWithoutAdminInput | EventCreateOrConnectWithoutAdminInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutAdminInput | EventUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: EventCreateManyAdminInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutAdminInput | EventUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: EventUpdateManyWithWhereWithoutAdminInput | EventUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type AccountDataCreateNestedOneWithoutUserDataInput = {
    create?: XOR<AccountDataCreateWithoutUserDataInput, AccountDataUncheckedCreateWithoutUserDataInput>
    connectOrCreate?: AccountDataCreateOrConnectWithoutUserDataInput
    connect?: AccountDataWhereUniqueInput
  }

  export type AccountDataUncheckedCreateNestedOneWithoutUserDataInput = {
    create?: XOR<AccountDataCreateWithoutUserDataInput, AccountDataUncheckedCreateWithoutUserDataInput>
    connectOrCreate?: AccountDataCreateOrConnectWithoutUserDataInput
    connect?: AccountDataWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type AccountDataUpdateOneWithoutUserDataNestedInput = {
    create?: XOR<AccountDataCreateWithoutUserDataInput, AccountDataUncheckedCreateWithoutUserDataInput>
    connectOrCreate?: AccountDataCreateOrConnectWithoutUserDataInput
    upsert?: AccountDataUpsertWithoutUserDataInput
    disconnect?: AccountDataWhereInput | boolean
    delete?: AccountDataWhereInput | boolean
    connect?: AccountDataWhereUniqueInput
    update?: XOR<XOR<AccountDataUpdateToOneWithWhereWithoutUserDataInput, AccountDataUpdateWithoutUserDataInput>, AccountDataUncheckedUpdateWithoutUserDataInput>
  }

  export type AccountDataUncheckedUpdateOneWithoutUserDataNestedInput = {
    create?: XOR<AccountDataCreateWithoutUserDataInput, AccountDataUncheckedCreateWithoutUserDataInput>
    connectOrCreate?: AccountDataCreateOrConnectWithoutUserDataInput
    upsert?: AccountDataUpsertWithoutUserDataInput
    disconnect?: AccountDataWhereInput | boolean
    delete?: AccountDataWhereInput | boolean
    connect?: AccountDataWhereUniqueInput
    update?: XOR<XOR<AccountDataUpdateToOneWithWhereWithoutUserDataInput, AccountDataUpdateWithoutUserDataInput>, AccountDataUncheckedUpdateWithoutUserDataInput>
  }

  export type AccountDataCreateNestedOneWithoutEventInput = {
    create?: XOR<AccountDataCreateWithoutEventInput, AccountDataUncheckedCreateWithoutEventInput>
    connectOrCreate?: AccountDataCreateOrConnectWithoutEventInput
    connect?: AccountDataWhereUniqueInput
  }

  export type EventPriceCreateNestedManyWithoutEventInput = {
    create?: XOR<EventPriceCreateWithoutEventInput, EventPriceUncheckedCreateWithoutEventInput> | EventPriceCreateWithoutEventInput[] | EventPriceUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventPriceCreateOrConnectWithoutEventInput | EventPriceCreateOrConnectWithoutEventInput[]
    createMany?: EventPriceCreateManyEventInputEnvelope
    connect?: EventPriceWhereUniqueInput | EventPriceWhereUniqueInput[]
  }

  export type EventPriceUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<EventPriceCreateWithoutEventInput, EventPriceUncheckedCreateWithoutEventInput> | EventPriceCreateWithoutEventInput[] | EventPriceUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventPriceCreateOrConnectWithoutEventInput | EventPriceCreateOrConnectWithoutEventInput[]
    createMany?: EventPriceCreateManyEventInputEnvelope
    connect?: EventPriceWhereUniqueInput | EventPriceWhereUniqueInput[]
  }

  export type EnumStatusFieldUpdateOperationsInput = {
    set?: $Enums.Status
  }

  export type EnumCategoryFieldUpdateOperationsInput = {
    set?: $Enums.Category
  }

  export type NullableBytesFieldUpdateOperationsInput = {
    set?: Buffer | null
  }

  export type EnumCityFieldUpdateOperationsInput = {
    set?: $Enums.City
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AccountDataUpdateOneRequiredWithoutEventNestedInput = {
    create?: XOR<AccountDataCreateWithoutEventInput, AccountDataUncheckedCreateWithoutEventInput>
    connectOrCreate?: AccountDataCreateOrConnectWithoutEventInput
    upsert?: AccountDataUpsertWithoutEventInput
    connect?: AccountDataWhereUniqueInput
    update?: XOR<XOR<AccountDataUpdateToOneWithWhereWithoutEventInput, AccountDataUpdateWithoutEventInput>, AccountDataUncheckedUpdateWithoutEventInput>
  }

  export type EventPriceUpdateManyWithoutEventNestedInput = {
    create?: XOR<EventPriceCreateWithoutEventInput, EventPriceUncheckedCreateWithoutEventInput> | EventPriceCreateWithoutEventInput[] | EventPriceUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventPriceCreateOrConnectWithoutEventInput | EventPriceCreateOrConnectWithoutEventInput[]
    upsert?: EventPriceUpsertWithWhereUniqueWithoutEventInput | EventPriceUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EventPriceCreateManyEventInputEnvelope
    set?: EventPriceWhereUniqueInput | EventPriceWhereUniqueInput[]
    disconnect?: EventPriceWhereUniqueInput | EventPriceWhereUniqueInput[]
    delete?: EventPriceWhereUniqueInput | EventPriceWhereUniqueInput[]
    connect?: EventPriceWhereUniqueInput | EventPriceWhereUniqueInput[]
    update?: EventPriceUpdateWithWhereUniqueWithoutEventInput | EventPriceUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EventPriceUpdateManyWithWhereWithoutEventInput | EventPriceUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EventPriceScalarWhereInput | EventPriceScalarWhereInput[]
  }

  export type EventPriceUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<EventPriceCreateWithoutEventInput, EventPriceUncheckedCreateWithoutEventInput> | EventPriceCreateWithoutEventInput[] | EventPriceUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventPriceCreateOrConnectWithoutEventInput | EventPriceCreateOrConnectWithoutEventInput[]
    upsert?: EventPriceUpsertWithWhereUniqueWithoutEventInput | EventPriceUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EventPriceCreateManyEventInputEnvelope
    set?: EventPriceWhereUniqueInput | EventPriceWhereUniqueInput[]
    disconnect?: EventPriceWhereUniqueInput | EventPriceWhereUniqueInput[]
    delete?: EventPriceWhereUniqueInput | EventPriceWhereUniqueInput[]
    connect?: EventPriceWhereUniqueInput | EventPriceWhereUniqueInput[]
    update?: EventPriceUpdateWithWhereUniqueWithoutEventInput | EventPriceUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EventPriceUpdateManyWithWhereWithoutEventInput | EventPriceUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EventPriceScalarWhereInput | EventPriceScalarWhereInput[]
  }

  export type EventCreateNestedOneWithoutEventPriceInput = {
    create?: XOR<EventCreateWithoutEventPriceInput, EventUncheckedCreateWithoutEventPriceInput>
    connectOrCreate?: EventCreateOrConnectWithoutEventPriceInput
    connect?: EventWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EventUpdateOneWithoutEventPriceNestedInput = {
    create?: XOR<EventCreateWithoutEventPriceInput, EventUncheckedCreateWithoutEventPriceInput>
    connectOrCreate?: EventCreateOrConnectWithoutEventPriceInput
    upsert?: EventUpsertWithoutEventPriceInput
    disconnect?: EventWhereInput | boolean
    delete?: EventWhereInput | boolean
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutEventPriceInput, EventUpdateWithoutEventPriceInput>, EventUncheckedUpdateWithoutEventPriceInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.Type | EnumTypeFieldRefInput<$PrismaModel>
    in?: $Enums.Type[]
    notIn?: $Enums.Type[]
    not?: NestedEnumTypeFilter<$PrismaModel> | $Enums.Type
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Type | EnumTypeFieldRefInput<$PrismaModel>
    in?: $Enums.Type[]
    notIn?: $Enums.Type[]
    not?: NestedEnumTypeWithAggregatesFilter<$PrismaModel> | $Enums.Type
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTypeFilter<$PrismaModel>
    _max?: NestedEnumTypeFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[]
    notIn?: $Enums.Status[]
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type NestedEnumCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.Category | EnumCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.Category[]
    notIn?: $Enums.Category[]
    not?: NestedEnumCategoryFilter<$PrismaModel> | $Enums.Category
  }

  export type NestedBytesNullableFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel> | null
    in?: Buffer[] | null
    notIn?: Buffer[] | null
    not?: NestedBytesNullableFilter<$PrismaModel> | Buffer | null
  }

  export type NestedEnumCityFilter<$PrismaModel = never> = {
    equals?: $Enums.City | EnumCityFieldRefInput<$PrismaModel>
    in?: $Enums.City[]
    notIn?: $Enums.City[]
    not?: NestedEnumCityFilter<$PrismaModel> | $Enums.City
  }

  export type NestedEnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[]
    notIn?: $Enums.Status[]
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type NestedEnumCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Category | EnumCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.Category[]
    notIn?: $Enums.Category[]
    not?: NestedEnumCategoryWithAggregatesFilter<$PrismaModel> | $Enums.Category
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCategoryFilter<$PrismaModel>
    _max?: NestedEnumCategoryFilter<$PrismaModel>
  }

  export type NestedBytesNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel> | null
    in?: Buffer[] | null
    notIn?: Buffer[] | null
    not?: NestedBytesNullableWithAggregatesFilter<$PrismaModel> | Buffer | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBytesNullableFilter<$PrismaModel>
    _max?: NestedBytesNullableFilter<$PrismaModel>
  }

  export type NestedEnumCityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.City | EnumCityFieldRefInput<$PrismaModel>
    in?: $Enums.City[]
    notIn?: $Enums.City[]
    not?: NestedEnumCityWithAggregatesFilter<$PrismaModel> | $Enums.City
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCityFilter<$PrismaModel>
    _max?: NestedEnumCityFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type UserDetailCreateWithoutAccountDataInput = {
    promoId?: number | null
    point?: number
    referalCode?: string | null
    yourReferalCode?: string | null
    expReferalCode?: Date | string | null
  }

  export type UserDetailUncheckedCreateWithoutAccountDataInput = {
    id?: number
    promoId?: number | null
    point?: number
    referalCode?: string | null
    yourReferalCode?: string | null
    expReferalCode?: Date | string | null
  }

  export type UserDetailCreateOrConnectWithoutAccountDataInput = {
    where: UserDetailWhereUniqueInput
    create: XOR<UserDetailCreateWithoutAccountDataInput, UserDetailUncheckedCreateWithoutAccountDataInput>
  }

  export type EventCreateWithoutAdminInput = {
    title: string
    status: $Enums.Status
    category: $Enums.Category
    location: string
    imgEvent?: Buffer | null
    imgSeat?: Buffer | null
    date: string
    startTime: string
    finishTime: string
    city: $Enums.City
    desc: string
    promo?: number | null
    updatedAt?: Date | string
    createdAt?: Date | string
    EventPrice?: EventPriceCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutAdminInput = {
    id?: number
    title: string
    status: $Enums.Status
    category: $Enums.Category
    location: string
    imgEvent?: Buffer | null
    imgSeat?: Buffer | null
    date: string
    startTime: string
    finishTime: string
    city: $Enums.City
    desc: string
    promo?: number | null
    updatedAt?: Date | string
    createdAt?: Date | string
    EventPrice?: EventPriceUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutAdminInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutAdminInput, EventUncheckedCreateWithoutAdminInput>
  }

  export type EventCreateManyAdminInputEnvelope = {
    data: EventCreateManyAdminInput | EventCreateManyAdminInput[]
    skipDuplicates?: boolean
  }

  export type UserDetailUpsertWithoutAccountDataInput = {
    update: XOR<UserDetailUpdateWithoutAccountDataInput, UserDetailUncheckedUpdateWithoutAccountDataInput>
    create: XOR<UserDetailCreateWithoutAccountDataInput, UserDetailUncheckedCreateWithoutAccountDataInput>
    where?: UserDetailWhereInput
  }

  export type UserDetailUpdateToOneWithWhereWithoutAccountDataInput = {
    where?: UserDetailWhereInput
    data: XOR<UserDetailUpdateWithoutAccountDataInput, UserDetailUncheckedUpdateWithoutAccountDataInput>
  }

  export type UserDetailUpdateWithoutAccountDataInput = {
    promoId?: NullableIntFieldUpdateOperationsInput | number | null
    point?: IntFieldUpdateOperationsInput | number
    referalCode?: NullableStringFieldUpdateOperationsInput | string | null
    yourReferalCode?: NullableStringFieldUpdateOperationsInput | string | null
    expReferalCode?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserDetailUncheckedUpdateWithoutAccountDataInput = {
    id?: IntFieldUpdateOperationsInput | number
    promoId?: NullableIntFieldUpdateOperationsInput | number | null
    point?: IntFieldUpdateOperationsInput | number
    referalCode?: NullableStringFieldUpdateOperationsInput | string | null
    yourReferalCode?: NullableStringFieldUpdateOperationsInput | string | null
    expReferalCode?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EventUpsertWithWhereUniqueWithoutAdminInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutAdminInput, EventUncheckedUpdateWithoutAdminInput>
    create: XOR<EventCreateWithoutAdminInput, EventUncheckedCreateWithoutAdminInput>
  }

  export type EventUpdateWithWhereUniqueWithoutAdminInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutAdminInput, EventUncheckedUpdateWithoutAdminInput>
  }

  export type EventUpdateManyWithWhereWithoutAdminInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutAdminInput>
  }

  export type EventScalarWhereInput = {
    AND?: EventScalarWhereInput | EventScalarWhereInput[]
    OR?: EventScalarWhereInput[]
    NOT?: EventScalarWhereInput | EventScalarWhereInput[]
    id?: IntFilter<"Event"> | number
    adminId?: IntFilter<"Event"> | number
    title?: StringFilter<"Event"> | string
    status?: EnumStatusFilter<"Event"> | $Enums.Status
    category?: EnumCategoryFilter<"Event"> | $Enums.Category
    location?: StringFilter<"Event"> | string
    imgEvent?: BytesNullableFilter<"Event"> | Buffer | null
    imgSeat?: BytesNullableFilter<"Event"> | Buffer | null
    date?: StringFilter<"Event"> | string
    startTime?: StringFilter<"Event"> | string
    finishTime?: StringFilter<"Event"> | string
    city?: EnumCityFilter<"Event"> | $Enums.City
    desc?: StringFilter<"Event"> | string
    promo?: FloatNullableFilter<"Event"> | number | null
    updatedAt?: DateTimeFilter<"Event"> | Date | string
    createdAt?: DateTimeFilter<"Event"> | Date | string
  }

  export type AccountDataCreateWithoutUserDataInput = {
    fullName: string
    email: string
    password: string
    is_verified?: boolean
    type: $Enums.Type
    noPhone: string
    updatedAt?: Date | string
    createdAt?: Date | string
    Event?: EventCreateNestedManyWithoutAdminInput
  }

  export type AccountDataUncheckedCreateWithoutUserDataInput = {
    fullName: string
    email: string
    password: string
    is_verified?: boolean
    type: $Enums.Type
    noPhone: string
    updatedAt?: Date | string
    createdAt?: Date | string
    Event?: EventUncheckedCreateNestedManyWithoutAdminInput
  }

  export type AccountDataCreateOrConnectWithoutUserDataInput = {
    where: AccountDataWhereUniqueInput
    create: XOR<AccountDataCreateWithoutUserDataInput, AccountDataUncheckedCreateWithoutUserDataInput>
  }

  export type AccountDataUpsertWithoutUserDataInput = {
    update: XOR<AccountDataUpdateWithoutUserDataInput, AccountDataUncheckedUpdateWithoutUserDataInput>
    create: XOR<AccountDataCreateWithoutUserDataInput, AccountDataUncheckedCreateWithoutUserDataInput>
    where?: AccountDataWhereInput
  }

  export type AccountDataUpdateToOneWithWhereWithoutUserDataInput = {
    where?: AccountDataWhereInput
    data: XOR<AccountDataUpdateWithoutUserDataInput, AccountDataUncheckedUpdateWithoutUserDataInput>
  }

  export type AccountDataUpdateWithoutUserDataInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    noPhone?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Event?: EventUpdateManyWithoutAdminNestedInput
  }

  export type AccountDataUncheckedUpdateWithoutUserDataInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    noPhone?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Event?: EventUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type AccountDataCreateWithoutEventInput = {
    fullName: string
    email: string
    password: string
    is_verified?: boolean
    type: $Enums.Type
    noPhone: string
    updatedAt?: Date | string
    createdAt?: Date | string
    userData?: UserDetailCreateNestedOneWithoutAccountDataInput
  }

  export type AccountDataUncheckedCreateWithoutEventInput = {
    id?: number
    fullName: string
    email: string
    password: string
    is_verified?: boolean
    type: $Enums.Type
    noPhone: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type AccountDataCreateOrConnectWithoutEventInput = {
    where: AccountDataWhereUniqueInput
    create: XOR<AccountDataCreateWithoutEventInput, AccountDataUncheckedCreateWithoutEventInput>
  }

  export type EventPriceCreateWithoutEventInput = {
    categoryEvent?: string | null
    qty: number
    price: number
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type EventPriceUncheckedCreateWithoutEventInput = {
    id?: number
    categoryEvent?: string | null
    qty: number
    price: number
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type EventPriceCreateOrConnectWithoutEventInput = {
    where: EventPriceWhereUniqueInput
    create: XOR<EventPriceCreateWithoutEventInput, EventPriceUncheckedCreateWithoutEventInput>
  }

  export type EventPriceCreateManyEventInputEnvelope = {
    data: EventPriceCreateManyEventInput | EventPriceCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type AccountDataUpsertWithoutEventInput = {
    update: XOR<AccountDataUpdateWithoutEventInput, AccountDataUncheckedUpdateWithoutEventInput>
    create: XOR<AccountDataCreateWithoutEventInput, AccountDataUncheckedCreateWithoutEventInput>
    where?: AccountDataWhereInput
  }

  export type AccountDataUpdateToOneWithWhereWithoutEventInput = {
    where?: AccountDataWhereInput
    data: XOR<AccountDataUpdateWithoutEventInput, AccountDataUncheckedUpdateWithoutEventInput>
  }

  export type AccountDataUpdateWithoutEventInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    noPhone?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userData?: UserDetailUpdateOneRequiredWithoutAccountDataNestedInput
  }

  export type AccountDataUncheckedUpdateWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    noPhone?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventPriceUpsertWithWhereUniqueWithoutEventInput = {
    where: EventPriceWhereUniqueInput
    update: XOR<EventPriceUpdateWithoutEventInput, EventPriceUncheckedUpdateWithoutEventInput>
    create: XOR<EventPriceCreateWithoutEventInput, EventPriceUncheckedCreateWithoutEventInput>
  }

  export type EventPriceUpdateWithWhereUniqueWithoutEventInput = {
    where: EventPriceWhereUniqueInput
    data: XOR<EventPriceUpdateWithoutEventInput, EventPriceUncheckedUpdateWithoutEventInput>
  }

  export type EventPriceUpdateManyWithWhereWithoutEventInput = {
    where: EventPriceScalarWhereInput
    data: XOR<EventPriceUpdateManyMutationInput, EventPriceUncheckedUpdateManyWithoutEventInput>
  }

  export type EventPriceScalarWhereInput = {
    AND?: EventPriceScalarWhereInput | EventPriceScalarWhereInput[]
    OR?: EventPriceScalarWhereInput[]
    NOT?: EventPriceScalarWhereInput | EventPriceScalarWhereInput[]
    id?: IntFilter<"EventPrice"> | number
    categoryEvent?: StringNullableFilter<"EventPrice"> | string | null
    qty?: IntFilter<"EventPrice"> | number
    price?: FloatFilter<"EventPrice"> | number
    updatedAt?: DateTimeFilter<"EventPrice"> | Date | string
    createdAt?: DateTimeFilter<"EventPrice"> | Date | string
    eventId?: IntNullableFilter<"EventPrice"> | number | null
  }

  export type EventCreateWithoutEventPriceInput = {
    title: string
    status: $Enums.Status
    category: $Enums.Category
    location: string
    imgEvent?: Buffer | null
    imgSeat?: Buffer | null
    date: string
    startTime: string
    finishTime: string
    city: $Enums.City
    desc: string
    promo?: number | null
    updatedAt?: Date | string
    createdAt?: Date | string
    admin: AccountDataCreateNestedOneWithoutEventInput
  }

  export type EventUncheckedCreateWithoutEventPriceInput = {
    id?: number
    adminId: number
    title: string
    status: $Enums.Status
    category: $Enums.Category
    location: string
    imgEvent?: Buffer | null
    imgSeat?: Buffer | null
    date: string
    startTime: string
    finishTime: string
    city: $Enums.City
    desc: string
    promo?: number | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type EventCreateOrConnectWithoutEventPriceInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutEventPriceInput, EventUncheckedCreateWithoutEventPriceInput>
  }

  export type EventUpsertWithoutEventPriceInput = {
    update: XOR<EventUpdateWithoutEventPriceInput, EventUncheckedUpdateWithoutEventPriceInput>
    create: XOR<EventCreateWithoutEventPriceInput, EventUncheckedCreateWithoutEventPriceInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutEventPriceInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutEventPriceInput, EventUncheckedUpdateWithoutEventPriceInput>
  }

  export type EventUpdateWithoutEventPriceInput = {
    title?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    location?: StringFieldUpdateOperationsInput | string
    imgEvent?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    imgSeat?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    date?: StringFieldUpdateOperationsInput | string
    startTime?: StringFieldUpdateOperationsInput | string
    finishTime?: StringFieldUpdateOperationsInput | string
    city?: EnumCityFieldUpdateOperationsInput | $Enums.City
    desc?: StringFieldUpdateOperationsInput | string
    promo?: NullableFloatFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: AccountDataUpdateOneRequiredWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutEventPriceInput = {
    id?: IntFieldUpdateOperationsInput | number
    adminId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    location?: StringFieldUpdateOperationsInput | string
    imgEvent?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    imgSeat?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    date?: StringFieldUpdateOperationsInput | string
    startTime?: StringFieldUpdateOperationsInput | string
    finishTime?: StringFieldUpdateOperationsInput | string
    city?: EnumCityFieldUpdateOperationsInput | $Enums.City
    desc?: StringFieldUpdateOperationsInput | string
    promo?: NullableFloatFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventCreateManyAdminInput = {
    id?: number
    title: string
    status: $Enums.Status
    category: $Enums.Category
    location: string
    imgEvent?: Buffer | null
    imgSeat?: Buffer | null
    date: string
    startTime: string
    finishTime: string
    city: $Enums.City
    desc: string
    promo?: number | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type EventUpdateWithoutAdminInput = {
    title?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    location?: StringFieldUpdateOperationsInput | string
    imgEvent?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    imgSeat?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    date?: StringFieldUpdateOperationsInput | string
    startTime?: StringFieldUpdateOperationsInput | string
    finishTime?: StringFieldUpdateOperationsInput | string
    city?: EnumCityFieldUpdateOperationsInput | $Enums.City
    desc?: StringFieldUpdateOperationsInput | string
    promo?: NullableFloatFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    EventPrice?: EventPriceUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    location?: StringFieldUpdateOperationsInput | string
    imgEvent?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    imgSeat?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    date?: StringFieldUpdateOperationsInput | string
    startTime?: StringFieldUpdateOperationsInput | string
    finishTime?: StringFieldUpdateOperationsInput | string
    city?: EnumCityFieldUpdateOperationsInput | $Enums.City
    desc?: StringFieldUpdateOperationsInput | string
    promo?: NullableFloatFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    EventPrice?: EventPriceUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateManyWithoutAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    location?: StringFieldUpdateOperationsInput | string
    imgEvent?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    imgSeat?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    date?: StringFieldUpdateOperationsInput | string
    startTime?: StringFieldUpdateOperationsInput | string
    finishTime?: StringFieldUpdateOperationsInput | string
    city?: EnumCityFieldUpdateOperationsInput | $Enums.City
    desc?: StringFieldUpdateOperationsInput | string
    promo?: NullableFloatFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventPriceCreateManyEventInput = {
    id?: number
    categoryEvent?: string | null
    qty: number
    price: number
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type EventPriceUpdateWithoutEventInput = {
    categoryEvent?: NullableStringFieldUpdateOperationsInput | string | null
    qty?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventPriceUncheckedUpdateWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryEvent?: NullableStringFieldUpdateOperationsInput | string | null
    qty?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventPriceUncheckedUpdateManyWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryEvent?: NullableStringFieldUpdateOperationsInput | string | null
    qty?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use AccountDataCountOutputTypeDefaultArgs instead
     */
    export type AccountDataCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccountDataCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventCountOutputTypeDefaultArgs instead
     */
    export type EventCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccountDataDefaultArgs instead
     */
    export type AccountDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccountDataDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDetailDefaultArgs instead
     */
    export type UserDetailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDetailDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventDefaultArgs instead
     */
    export type EventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventPriceDefaultArgs instead
     */
    export type EventPriceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventPriceDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}