// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Type {
  user
  admin
}

model AccountData {
  id          Int           @id @default(autoincrement())
  fullName    String
  email       String        @unique
  password    String
  is_verified Boolean       @default(false)
  type        Type
  noPhone     String
  userData    UserDetail    @relation(fields: [id], references: [id])
  updatedAt   DateTime      @updatedAt
  createdAt   DateTime      @default(now())
  Event       Event[]
  Transaction Transaction[]

  @@index([email])
  @@map("accountdata")
}

model UserDetail {
  id              Int           @id @default(autoincrement())
  promoId         Int?
  point           Int           @default(0)
  referalCode     String?
  yourReferalCode String?       @unique
  expReferalCode  DateTime?
  AccountData     AccountData?
  Transaction     Transaction[]

  @@map("userdetail")
}

enum Status {
  Publish
  Hidden
}

enum Category {
  Concert
  Expo
  Play
  Workshop
  Sport
}

enum City {
  Jakarta
  Bogor
  Depok
  Tangerang
  Bekasi
}

model Event {
  id          Int           @id @default(autoincrement())
  adminId     Int
  admin       AccountData   @relation(fields: [adminId], references: [id])
  title       String        @unique
  status      Status
  category    Category
  location    String
  imgEvent    Bytes?        @db.MediumBlob
  imgSeat     Bytes?        @db.MediumBlob
  date        String
  startTime   String
  finishTime  String
  city        City
  desc        String
  promo       Float?
  updatedAt   DateTime      @updatedAt
  createdAt   DateTime      @default(now())
  EventPrice  EventPrice[]
  Transaction Transaction[]

  @@map("events")
}

model EventPrice {
<<<<<<< HEAD
  id            Int           @id @default(autoincrement())
  categoryEvent String?       @unique
=======
<<<<<<< Updated upstream
  id            Int      @id @default(autoincrement())
  categoryEvent String?  @unique
=======
  id            Int           @id @default(autoincrement())
  categoryEvent String?
>>>>>>> Stashed changes
>>>>>>> Branch-buat-merge
  qty           Int
  price         Float
  updatedAt     DateTime      @updatedAt
  createdAt     DateTime      @default(now())
  Event         Event?        @relation(fields: [eventId], references: [id])
  eventId       Int?
  Transaction   Transaction[]

  @@map("eventprice")
}

enum StatusTransaction {
  Pending
  Paid
}

model Transaction {
  id            Int               @id @default(autoincrement())
  buyerId       Int
  buyer         AccountData       @relation(fields: [buyerId], references: [id])
  buyerDetailId Int
  buyerDetail   UserDetail        @relation(fields: [buyerDetailId], references: [id])
  eventId       Int
  event         Event             @relation(fields: [eventId], references: [id])
  eventPriceId  Int
  eventPrice    EventPrice        @relation(fields: [eventPriceId], references: [id])
  status        StatusTransaction
  createdAt     DateTime          @default(now())
  totalQty      Int
  totalPrice    Float

  @@map("transaction")
}
